HGroups=unique(df$group1[stringr::str_detect(df$group1,"H")])
if(mediationOnly) {
delVars=df1$text[df1$group1 %in% c("0","5",HGroups)]
delVars
df1=df1[!(df1$text %in% delVars),]
}
H1vars=df1$text[df1$group1=="H1"]
H1vars
width<-max(df1$x1)+1
width
equation=paste("digraph {\ngraph [",getOptions(graphOptions),"]\n")
# whatLabels="std";mediationOnly=FALSE;residuals=FALSE;nodesep=NULL;ranksep=NULL
# regression=TRUE;indirect=FALSE;secondIndirect=FALSE;total=FALSE
# residuals=FALSE
graphOptions = list(rankdir="LR", ranksep="0.75", nodesep="0.25",
overlap = "true", fontsize = "10")
nodeOptions = list()
edgeOptions = list(color = "black")
equation=paste("digraph {\ngraph [",getOptions(graphOptions),"]\n")
temp=paste0("t",0:(width-1))
temp
equation<-equation %>%
paste0("
subgraph cluster0{
style=invis;
node [style=invis]\n") %>%
paste0(str_flatten(temp,";"),"\n") %>%
paste0("edge[style=invis];\n",
str_flatten(temp,"->"),"\n}\n")
require(stringr)
equation<-equation %>%
paste0("
subgraph cluster0{
style=invis;
node [style=invis]\n") %>%
paste0(str_flatten(temp,";"),"\n") %>%
paste0("edge[style=invis];\n",
str_flatten(temp,"->"),"\n}\n")
temp=df1$text[(df1$group1 %in% HGroups) & df1$y==1]
temp1=df1$text[(df1$group1 %in% HGroups) & df1$y==1 & df1$latent==FALSE]
temp2=df1$text[(df1$group1 %in% HGroups) & df1$y==1 & df1$latent==TRUE]
if(length(temp)>0){
equation<-equation %>%
paste0("subgraph {\n")
if(length(temp1)>0){
equation<-equation %>%
paste0("node [shape=box ",getOptions(nodeOptions)," ]\n",str_flatten(temp1,";"),"\n")
}
if(length(temp2)>0){
equation<-equation %>%
paste0("node [shape=oval ",getOptions(nodeOptions),"]\n",str_flatten(temp2,";"),"\n")
}
equation<-equation %>%
paste0("edge[style=invis];\n",
str_flatten(temp,"->"),"\n}\n")
}
temp=df1$text[(df1$group1 %in% HGroups) & df1$y==2]
temp1=df1$text[(df1$group1 %in% HGroups) & df1$y==2 & df1$latent==FALSE]
temp2=df1$text[(df1$group1 %in% HGroups) & df1$y==2 & df1$latent==TRUE]
if(length(temp)>0){
equation<-equation %>%
paste0("subgraph {\n")
if(length(temp1)>0){
equation<-equation %>%
paste0("node [shape=box ",getOptions(nodeOptions),"]\n",str_flatten(temp1,";"),"\n")
}
if(length(temp2)>0){
equation<-equation %>%
paste0("node [shape=oval ",getOptions(nodeOptions),"]\n",str_flatten(temp2,";"),"\n")
}
equation<-equation %>%
paste0("edge[style=invis];\n",
str_flatten(temp,"->"),"\n}\n")
}
temp=df1$text[df1$latent==FALSE & !(df1$group1 %in% HGroups)]
temp
if(length(temp)>0){
equation<-equation %>%
paste0("node [shape=box ",getOptions(nodeOptions),"]\n") %>%
paste0(str_flatten(temp,";"),"\n")
}
temp=df1$text[df1$latent==TRUE & !(df1$group1 %in% HGroups)]
temp
if(length(temp)>0){
equation<-equation %>%
paste0("node [shape=oval ",getOptions(nodeOptions),"]\n") %>%
paste0(str_flatten(temp,";"),"\n")
}
(oddHGroups=unique(df1$group1[df1$group1 %in% HGroups & df1$y==1]))
(evenHGroups=unique(df1$group1[df1$group1 %in% HGroups & df1$y==2]))
for(i in 0:(width-1)){
df2=df1[df1$x1==i,]
df2
addOrder=ifelse("M2" %in% df2$group1,FALSE,TRUE)
temp=c(df2$text[df2$group1 %in% oddHGroups],
df2$text[!(df2$group1 %in% HGroups)],
df2$text[df2$group1 %in% evenHGroups])
temp=c(paste0("t",i),temp)
equation<-equation %>% makeSameRank(temp,addOrder=addOrder)
}
equation<-equation %>% paste0("\n edge [",getOptions(edgeOptions),"]\n")
res=parameterEstimates(fit,standardized=TRUE)
res$lhs=removePeriod(res$lhs)
res$rhs=removePeriod(res$rhs)
res1=res[res$op!=":=",]
if(residuals==FALSE) res1=res1[res1$lhs!=res1$rhs,]
if(regression==FALSE) res1=res1[res1$op!="~",]
res1
if(mediationOnly) {
res1=res1[!(res1$lhs %in% delVars),]
res1=res1[!(res1$rhs %in% delVars),]
}
if(nrow(res1)>0){
for(i in 1:nrow(res1)){
if(res1$op[i]=="=~") {
if(res1$rhs[i] %in% H1vars) {
temp=paste0(res1$rhs[i],"->",res1$lhs[i],"[dir=back ")
} else{
temp=paste0(res1$lhs[i],"->",res1$rhs[i],"[")
}
} else {
temp=paste0(res1$rhs[i],"->",res1$lhs[i],"[")
if(res1$op[i]=="~~") temp=paste0(temp,"dir=both constraint=false ")
}
equation <- equation %>% paste0(temp)
if(is.na(res1$pvalue[i])) equation <- equation %>% paste0("style=dashed ")
else if(res1$pvalue[i] >=0.05) equation <- equation %>% paste0("style=dashed ")
temp=""
if(whatLabels=="std") temp=sprintf("%.02f",res1$std.all[i])
else if(whatLabels=="est") temp=sprintf("%.02f",res1$est[i])
else if(whatLabels=="name") temp=res1$label[i]
if(!is.null(temp)) {
if(temp!="") equation <- equation %>% paste0("label=",temp)
}
equation <- equation %>% paste0("]\n")
}
}
if(!is.null(labels)){
labels_string = buildLabels(labels)
equation <- paste(equation, labels_string)
}
equation=paste0(equation,"\n}")
equation
cat(euation)
cat(equation)
res1
df1
library(semMediation)
lavaanPlot(model=fit)
lavaanPlot(model=fit, labels = labels, coef =T, stand = T, stars = "regress",cov=T)
semDiagram(fit,labels = labels,nodeOptions=list(width=2),whatLabels="std")
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
'
fit <- cfa(HS.model, data=HolzingerSwineford1939)
lavaanPlot(model = fit, edge_options = list(color = "grey"))
semDiagram(fit)
lavaanPlot(model = fit, edge_options = list(color = "grey"))
semDiagram(fit)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
'
fit <- cfa(HS.model, data=HolzingerSwineford1939)
labels = list(visual = "Visual Ability", textual = "Textual Ability", speed = "Speed Ability")
# significant standardized paths only
lavaanPlot(model = fit,
labels = labels,
graph_options = list(rankdir="RL"),
node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "gray"),
coefs = TRUE)
model <- 'mpg ~ cyl + disp + hp
qsec ~ disp + hp + wt'
fit <- sem(model, data = mtcars)
summary(fit)
lavaanPlot(model = fit, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"),
coefs = TRUE,cov=TRUE)
semDiagram(fit)
model <- 'mpg ~ cyl + disp + hp
qsec ~ disp + hp + wt'
fit <- sem(model, data = mtcars)
summary(fit)
lavaanPlot(model = fit, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"),
coefs = TRUE,cov=TRUE)
mediationPlot(fit)
semDiagram(fit)
cat(makeDiagram(fit))
semDiagram(fit)
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
lavaanPlot(model = fit, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"),
coefs = TRUE,cov=TRUE)
mediationPlot(fit)
semDiagram(fit)
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
semDiagram(fit,labels = labels,nodeOptions=list(width=2),whatLabels="std")
# lavaan에서의 조절효과(조절변수가 연속형인 경우)
sem.mod1 <- '
y ~ x + mod + centered.xmod
'
fit <- sem(sem.mod1, newData)
summary(fit, std=T, fit=T)
# lavaanPlot
labels <- list(x = "교육기간", mod = "학급인원수", centeredxmod = "교육기간X학급인원수", y = "월수입")
cat(makeDiagram(fit))
lavaanPlot(model=fit)
semDiagram(fit)
lavaanPlot(model=fit, labels = labels, coef =T, stand = T, stars = "regress",cov=T)
semDiagram(fit,labels = labels,nodeOptions=list(width=2),whatLabels="std")
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
'
fit <- cfa(HS.model, data=HolzingerSwineford1939)
lavaanPlot(model = fit, edge_options = list(color = "grey"))
semDiagram(fit)
cat(makeDiagram(fit))
semDiagram(fit)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
'
fit <- cfa(HS.model, data=HolzingerSwineford1939)
labels = list(visual = "Visual Ability", textual = "Textual Ability", speed = "Speed Ability")
# significant standardized paths only
lavaanPlot(model = fit,
labels = labels,
graph_options = list(rankdir="RL"),
node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "gray"),
coefs = TRUE)
semPaths(fit,whatLabels = "std")
semDiagram(fit,labels = labels,
nodeOptions = list(color = "blue", fontname = "Helvetica"),
edgeOptions = list(color = "gray"),
whatLabels="none")
model='
knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
'
mediationModel=makeEquation(X="knowledge",M="empathy",Y="intervention")
model=paste0(model,mediationModel)
cat(model)
fit=sem(model,data=ADHD)
summary(fit,standardized= TRUE ,fit.measures= FALSE ,rsquare= FALSE ,modindices= FALSE )
semPaths(fit,rotation=2,whatLabels = "std")
#mediationPlot(fit,whatLabels = "name",residuals=FALSE)
mediationPlot(fit,width=8,height=4,whatLabels = "std",residuals = FALSE,base_size=4)
semDiagram(fit)
model <- 'mpg ~ cyl + disp + hp
qsec ~ disp + hp + wt'
fit <- sem(model, data = mtcars)
summary(fit)
lavaanPlot(model = fit, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"),
coefs = TRUE,cov=TRUE)
mediationPlot(fit)
semDiagram(fit)
cat(makeDiagram(fit))
fit
mediationPlot(fit)
df=fit2df(fit)
df=addpos(df)
df$text=removePeriod(df$text)
df1=addPos2(df)
df1
HGroups=unique(df$group1[stringr::str_detect(df$group1,"H")])
if(mediationOnly) {
delVars=df1$text[df1$group1 %in% c("0","5",HGroups)]
delVars
df1=df1[!(df1$text %in% delVars),]
}
H1vars=df1$text[df1$group1=="H1"]
H1vars
width<-max(df1$x1)+1
width
equation=paste("digraph {\ngraph [",getOptions(graphOptions),"]\n")
temp=paste0("t",0:(width-1))
temp
equation<-equation %>%
paste0("
subgraph cluster0{
style=invis;
node [style=invis]\n") %>%
paste0(str_flatten(temp,";"),"\n") %>%
paste0("edge[style=invis];\n",
str_flatten(temp,"->"),"\n}\n")
temp=df1$text[(df1$group1 %in% HGroups) & df1$y==1]
temp1=df1$text[(df1$group1 %in% HGroups) & df1$y==1 & df1$latent==FALSE]
temp2=df1$text[(df1$group1 %in% HGroups) & df1$y==1 & df1$latent==TRUE]
if(length(temp)>0){
equation<-equation %>%
paste0("subgraph {\n")
if(length(temp1)>0){
equation<-equation %>%
paste0("node [shape=box ",getOptions(nodeOptions)," ]\n",str_flatten(temp1,";"),"\n")
}
if(length(temp2)>0){
equation<-equation %>%
paste0("node [shape=oval ",getOptions(nodeOptions),"]\n",str_flatten(temp2,";"),"\n")
}
equation<-equation %>%
paste0("edge[style=invis];\n",
str_flatten(temp,"->"),"\n}\n")
}
temp=df1$text[(df1$group1 %in% HGroups) & df1$y==2]
temp1=df1$text[(df1$group1 %in% HGroups) & df1$y==2 & df1$latent==FALSE]
temp2=df1$text[(df1$group1 %in% HGroups) & df1$y==2 & df1$latent==TRUE]
if(length(temp)>0){
equation<-equation %>%
paste0("subgraph {\n")
if(length(temp1)>0){
equation<-equation %>%
paste0("node [shape=box ",getOptions(nodeOptions),"]\n",str_flatten(temp1,";"),"\n")
}
if(length(temp2)>0){
equation<-equation %>%
paste0("node [shape=oval ",getOptions(nodeOptions),"]\n",str_flatten(temp2,";"),"\n")
}
equation<-equation %>%
paste0("edge[style=invis];\n",
str_flatten(temp,"->"),"\n}\n")
}
temp=df1$text[df1$latent==FALSE & !(df1$group1 %in% HGroups)]
temp
if(length(temp)>0){
equation<-equation %>%
paste0("node [shape=box ",getOptions(nodeOptions),"]\n") %>%
paste0(str_flatten(temp,";"),"\n")
}
temp=df1$text[df1$latent==TRUE & !(df1$group1 %in% HGroups)]
temp
if(length(temp)>0){
equation<-equation %>%
paste0("node [shape=oval ",getOptions(nodeOptions),"]\n") %>%
paste0(str_flatten(temp,";"),"\n")
}
(oddHGroups=unique(df1$group1[df1$group1 %in% HGroups & df1$y==1]))
(evenHGroups=unique(df1$group1[df1$group1 %in% HGroups & df1$y==2]))
for(i in 0:(width-1)){
df2=df1[df1$x1==i,]
df2
addOrder=ifelse("M2" %in% df2$group1,FALSE,TRUE)
temp=c(df2$text[df2$group1 %in% oddHGroups],
df2$text[!(df2$group1 %in% HGroups)],
df2$text[df2$group1 %in% evenHGroups])
temp=c(paste0("t",i),temp)
equation<-equation %>% makeSameRank(temp,addOrder=addOrder)
}
equation<-equation %>% paste0("\n edge [",getOptions(edgeOptions),"]\n")
res=parameterEstimates(fit,standardized=TRUE)
res$lhs=removePeriod(res$lhs)
res$rhs=removePeriod(res$rhs)
res1=res[res$op!=":=",]
if(residuals==FALSE) res1=res1[res1$lhs!=res1$rhs,]
if(regression==FALSE) res1=res1[res1$op!="~",]
res1
if(mediationOnly) {
res1=res1[!(res1$lhs %in% delVars),]
res1=res1[!(res1$rhs %in% delVars),]
}
if(nrow(res1)>0){
for(i in 1:nrow(res1)){
if(res1$op[i]=="=~") {
if(res1$rhs[i] %in% H1vars) {
temp=paste0(res1$rhs[i],"->",res1$lhs[i],"[dir=back ")
} else{
temp=paste0(res1$lhs[i],"->",res1$rhs[i],"[")
}
} else {
if(res1$op[i]=="~~") {
if(df1$group1[df1$text==res1$rhs[i]]==df1$group1[df1$text==res1$lhs[i]]){
if(df1$x1[df1$text==res1$rhs[i]]==min(df1$x1)){
temp=paste0(res1$rhs[i],":w ->",res1$lhs[i],":w [")
} else if(df1$x1[df1$text==res1$rhs[i]]==max(df1$x1)){
temp=paste0(res1$rhs[i],":e ->",res1$lhs[i],":e [")
} else{
temp=paste0(res1$rhs[i],"->",res1$lhs[i],"[")
}
} else{
temp=paste0(res1$rhs[i],"->",res1$lhs[i],"[")
}
temp=paste0(temp,"dir=both constraint=false ")
} else{
temp=paste0(res1$rhs[i],"->",res1$lhs[i],"[")
}
}
equation <- equation %>% paste0(temp)
if(is.na(res1$pvalue[i])) equation <- equation %>% paste0("style=dashed ")
else if(res1$pvalue[i] >=0.05) equation <- equation %>% paste0("style=dashed ")
temp=""
if(whatLabels=="std") temp=sprintf("%.02f",res1$std.all[i])
else if(whatLabels=="est") temp=sprintf("%.02f",res1$est[i])
else if(whatLabels=="name") temp=res1$label[i]
if(!is.null(temp)) {
if(temp!="") equation <- equation %>% paste0("label=",temp)
}
equation <- equation %>% paste0("]\n")
}
}
df1
library(semMediation)
cat(makeDiagram(fit))
semDiagram(fit)
df=fit2df(fit)
df=addpos(df)
df$text=removePeriod(df$text)
df
df1=addPos2(df)
df1
df=fit2df(fit)
df=addpos(df)
df$text=removePeriod(df$text)
df
df$x1=floor(df$x)
df
HGroups=unique(df$group1[stringr::str_detect(df$group1,"H")])
MGroups=unique(df$group1[stringr::str_detect(df$group1,"M")])
HMGroups=c(HGroups,MGroups)
upper<-lower<-0
for(i in seq_along(HGroups)){
# cat("i=",i,",upper=",upper,",lower=",lower,"\n")
temp=df$text[df$group1 == HGroups[i]]
add=1:length(temp)
mpos=ceiling(length(temp)/2)+1
mpos
if(length(temp)%%2==0){
add[(length(temp)/2+1):length(temp)]=add[(length(temp)/2+1):length(temp)]+1
}
df$x1[df$group1== HGroups[i]]=add+ifelse(upper<=lower,upper,lower)
df$x1[df$group1== paste0("M",i)]=mpos+ifelse(upper<=lower,upper,lower)
df$y[df$group1== paste0("M",i)]=ifelse(upper<=lower,1,2)
if(upper<=lower) {
upper=upper+add[length(add)]
df$y[df$group1== HGroups[i]]=1
} else{
lower=lower+add[length(add)]
df$y[df$group1== HGroups[i]]=2
}
}
df
diff=upper-lower
diff
if(diff>=2){
if(upper>lower){
df$x1[df$group1 %in% HMGroups & df$y==2]=df$x1[df$group1 %in% HMGroups & df$y==2]+diff%/%2
}
}
diff1=max(upper,lower)-max(df$x)
if(diff1>0) df$x1[df$x>=(max(df$x)-1)]=df$x1[df$x>=(max(df$x)-1)]+diff1+1
if((length(unique(df$x1))==2) &(max(df$x1)==1)){
df$x1[df$x1==1]=4
}
df
df$y[df$group1=="X"]
df$y[df$group1=="X"]=1:length(df$y[df$group1=="X"])
df
df$y[df$group1=="Y"]=1:length(df$y[df$group1=="Y"])
df
library(semMediation)
model <- 'mpg ~ cyl + disp + hp
qsec ~ disp + hp + wt'
fit <- sem(model, data = mtcars)
summary(fit)
lavaanPlot(model = fit, node_options = list(shape = "box", fontname = "Helvetica"),
edge_options = list(color = "grey"),
coefs = TRUE,cov=TRUE)
mediationPlot(fit)
semDiagram(fit)
cat(makeDiagram(fit))
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
DiagrammeR::grViz("test.gv")
