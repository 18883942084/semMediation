res=c()
for(i in seq_along(x)){
if(i==1){
temp=NULL
} else {
temp=paste0(x[1],"*",x[i])
}
res=c(res,temp)
}
res
}
x
removeBracket(x)
x
removeBracket(x)
MYstr1
x=MYstr1[3]
x
removeBracket(x)
x=MYstr1
x
removeBracket(x)
x=MYstr1
x
x=str_replace(x,fixed(")"),"")
x=unlist(str_split(x,fixed("*(")))
x=unlist(str_split(x,fixed("+")))
x
x=XYstr1[1]
x
x=MYstr1[1]
x
removeBracket(x)
x=MYstr1[1]
x
X="X";M="M";Y="Y"
moderator=list(name=c("z1","z2"),site=list(c("a","b","c"),c("a","c")))
moderator
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
requier(stringr)
require(stringr)
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"),"\n")
MY=c(M,MY)
XY=c(X,XY)
MYstr=interactStr(MY,prefix="b")
XYstr=interactStr(XY,prefix="c")
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"),"\n")
equation=paste0(equation,temp)
cat(equation)
#'make interaction equation
#'@param x character vector
#'@param prefix prefix
interactStr=function(x,prefix="a"){
res=c()
count=1
for(i in seq_along(x)){
temp=paste0(prefix,count,"*",x[i])
res=c(res,temp)
count=count+1
if(i>1){
temp=paste0(prefix,count,"*",x[i],":",x[1])
res=c(res,temp)
count=count+1
}
}
res
}
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"),"\n")
MY=c(M,MY)
XY=c(X,XY)
MYstr=interactStr(MY,prefix="b")
XYstr=interactStr(XY,prefix="c")
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"),"\n")
equation=paste0(equation,temp)
cat(equation)
XMstr
MYstr
XYstr1=stringr::str_replace_all(XYstr,":","*")
XYstr1
MEqui=stringr::str_flatten(XMstr,"+")
MEqui
MYstr1=str_replace(MYstr,M,paste0("(",MEqui,")"))
MYstr1=stringr::str_replace_all(MYstr1,":","*")
MYstr1
x
removeParentheses=function(string){
res=c()
for(i in seq_along(string)){
x=string[i]
x=str_replace(x,fixed(")"),"")
x=unlist(str_split(x,fixed("*(")))
x=unlist(str_split(x,fixed("+")))
x
for(i in seq_along(x)){
if(i==1){
temp=NULL
} else {
temp=paste0(x[1],"*",x[i])
}
res=c(res,temp)
}
}
res
}
x=MYstr1[1]
x
removeParentheses(x)
MYstr1
x=MYstr1
removeParentheses(x)
removeParentheses=function(string){
res=c()
for(i in seq_along(string)){
x=string[i]
x=str_replace(x,fixed(")"),"")
x=unlist(str_split(x,fixed("*(")))
x=unlist(str_split(x,fixed("+")))
x
for(i in seq_along(x)){
if(i==1){
if(length(x)==1) {
temp=x[1]
} else{
temp=NULL
}
} else {
temp=paste0(x[1],"*",x[i])
}
res=c(res,temp)
}
}
res
}
x=MYstr1
x=MYstr1[1]
x
x=MYstr1[1]
x
removeParentheses(x)
x=MYstr1[2]
x
removeParentheses(x)
x=MYstr1
x
removeParentheses(x)
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"),"\n")
MY=c(M,MY)
XY=c(X,XY)
MYstr=interactStr(MY,prefix="b")
XYstr=interactStr(XY,prefix="c")
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"),"\n")
equation=paste0(equation,temp)
cat(equation)
XMstr
MYstr
XYstr1=stringr::str_replace_all(XYstr,":","*")
XYstr1
MEqui=stringr::str_flatten(XMstr,"+")
MEqui
MYstr1=str_replace(MYstr,M,paste0("(",MEqui,")"))
MYstr1=stringr::str_replace_all(MYstr1,":","*")
MYstr1
XYstr1
MYstr1
MYstr2=removeParentheses(MYstr1)
MYstr2
totalStr=c(XYstr1,MYstr2)
totalStr
x=totalStr
x
yes=x[str_detect(x,by)]
x
groupby="X"
yes=x[str_detect(x,by)]
yes=x[str_detect(x,groupby)]
yes
no=x[!str_detect(x,groupby)]
no
yes=x[str_detect(x,groupby)]
yes
extractX(string,groupby="X"){
for(i in seq_along(string)){
if(string[i]==groupby) string[i]=paste0("1*",groupby)
}
str_replace(string,paste0("*",groupby),"")
}
extractX=function(string,groupby="X"){
for(i in seq_along(string)){
if(string[i]==groupby) string[i]=paste0("1*",groupby)
}
str_replace(string,paste0("*",groupby),"")
}
yes=x[str_detect(x,groupby)]
yes
strGrouping=function(x,groupby="X"){
yes=x[str_detect(x,groupby)]
yes=extractX(yes,groupby=groupby)
no=x[!str_detect(x,groupby)]
no
list(yes=yes,no=no)
}
extractX=function(string,groupby="X"){
for(i in seq_along(string)){
if(string[i]==groupby) string[i]=paste0("1*",groupby)
}
str_replace(string,paste0("*",groupby),"")
}
x=totalStr
x
totalStr
strGrouping(totalStr,"X")
extractX=function(string,groupby="X"){
for(i in seq_along(string)){
if(string[i]==groupby) string[i]=paste0("1*",groupby)
}
str_replace(string,fixed(paste0("*",groupby)),"")
}
strGrouping=function(x,groupby="X"){
yes=x[str_detect(x,groupby)]
yes=extractX(yes,groupby=groupby)
no=x[!str_detect(x,groupby)]
no
list(yes=yes,no=no)
}
totalStr
strGrouping(totalStr,"X")
totalStr
result=strGrouping(totalStr,X)
result
direct=result$yes
cat(makeEquation(X="X",M="M",Y="Y"))
require(semMediation)
cat(makeEquation(X="X",M="M",Y="Y"))
#' Extract groupby string
#' @param string character vector
#' @param groupby name of groupby
extractX=function(string,groupby="X"){
for(i in seq_along(string)){
if(string[i]==groupby) string[i]=paste0("1*",groupby)
}
str_replace(string,fixed(paste0("*",groupby)),"")
}
#' Make Grouping equation
#' @param x  character vector
#' @param groupby name of groupby
strGrouping=function(x,groupby="X"){
yes=x[str_detect(x,groupby)]
yes=extractX(yes,groupby=groupby)
no=x[!str_detect(x,groupby)]
no
list(yes=yes,no=no)
}
modmedEquation=function(X="",M="",Y="",moderator=list(),labels=NULL){
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"),"\n")
MY=c(M,MY)
XY=c(X,XY)
MYstr=interactStr(MY,prefix="b")
XYstr=interactStr(XY,prefix="c")
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"),"\n")
equation=paste0(equation,temp)
cat(equation)
XMstr
MYstr
XYstr1=stringr::str_replace_all(XYstr,":","*")
XYstr1
MEqui=stringr::str_flatten(XMstr,"+")
MEqui
MYstr1=str_replace(MYstr,M,paste0("(",MEqui,")"))
MYstr1=stringr::str_replace_all(MYstr1,":","*")
MYstr2=removeParentheses(MYstr1)
totalStr=c(XYstr1,MYstr2)
result=strGrouping(totalStr,X)
direct=result$yes
indirect=result$no
equation=paste0(equation,"direct:=",str_flatten(direct,"+"),"\n")
equation=paste0(equation,"indirect:=",str_flatten(indirect,"+"),"\n")
equation=paste0(equation,"total:=direct+indirect\n")
for(i in seq_along(moderator$name)){
name=moderator$name[i]
temp=paste0(name," ~ ",name,".mean*1\n")
temp=paste0(temp,name," ~~ ",name,".var*",name,"\n")
equation=paste0(equation,temp)
}
}
modmedEquation=function(X="",M="",Y="",moderator=list(),labels=NULL){
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"),"\n")
MY=c(M,MY)
XY=c(X,XY)
MYstr=interactStr(MY,prefix="b")
XYstr=interactStr(XY,prefix="c")
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"),"\n")
equation=paste0(equation,temp)
cat(equation)
XMstr
MYstr
XYstr1=stringr::str_replace_all(XYstr,":","*")
XYstr1
MEqui=stringr::str_flatten(XMstr,"+")
MEqui
MYstr1=str_replace(MYstr,M,paste0("(",MEqui,")"))
MYstr1=stringr::str_replace_all(MYstr1,":","*")
MYstr2=removeParentheses(MYstr1)
totalStr=c(XYstr1,MYstr2)
result=strGrouping(totalStr,X)
direct=result$yes
indirect=result$no
equation=paste0(equation,"direct:=",str_flatten(direct,"+"),"\n")
equation=paste0(equation,"indirect:=",str_flatten(indirect,"+"),"\n")
equation=paste0(equation,"total:=direct+indirect\n")
for(i in seq_along(moderator$name)){
name=moderator$name[i]
temp=paste0(name," ~ ",name,".mean*1\n")
temp=paste0(temp,name," ~~ ",name,".var*",name,"\n")
equation=paste0(equation,temp)
}
equation
}
#'Make moderated mediation equation
#' @param X A character vectors indicating independent variables
#' @param M A character vectors indicating mediators
#' @param Y A character vectors indicating dependent variables
#' @param moderator moderator
#' @param labels labels
modmedEquation=function(X="",M="",Y="",moderator=list(),labels=NULL){
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"),"\n")
MY=c(M,MY)
XY=c(X,XY)
MYstr=interactStr(MY,prefix="b")
XYstr=interactStr(XY,prefix="c")
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"),"\n")
equation=paste0(equation,temp)
cat(equation)
XMstr
MYstr
XYstr1=stringr::str_replace_all(XYstr,":","*")
XYstr1
MEqui=stringr::str_flatten(XMstr,"+")
MEqui
MYstr1=str_replace(MYstr,M,paste0("(",MEqui,")"))
MYstr1=stringr::str_replace_all(MYstr1,":","*")
MYstr2=removeParentheses(MYstr1)
totalStr=c(XYstr1,MYstr2)
result=strGrouping(totalStr,X)
direct=result$yes
indirect=result$no
equation=paste0(equation,"direct:=",str_flatten(direct,"+"),"\n")
equation=paste0(equation,"indirect:=",str_flatten(indirect,"+"),"\n")
equation=paste0(equation,"total:=direct+indirect\n")
for(i in seq_along(moderator$name)){
name=moderator$name[i]
temp=paste0(name," ~ ",name,".mean*1\n")
temp=paste0(temp,name," ~~ ",name,".var*",name,"\n")
equation=paste0(equation,temp)
}
equation
}
X="time.c";M="pubs";Y="jobs"
moderator=list(name=c("alex.c","moon.c"),site=list(c("a","b","c"),c("a","c")))
X="X";M="M";Y="Y"
moderator=list(name=c("z1","z2"),site=list(c("a","b","c"),c("a","c")))
modmedEquation(X=X,M=M,Y=Y,moderator=moderator)
cat(modmedEquation(X=X,M=M,Y=Y,moderator=moderator))
X="X";M="M";Y="Y"
moderator=list(name=c("z1","z2"),site=list(c("a","b","c"),c("a","c")))
cat(modmedEquation(X=X,M=M,Y=Y,moderator=moderator))
X="time.c";M="pubs";Y="jobs"
moderator=list(name=c("alex.c"),site=list(c("a","c")))
moderator
cat(modmedEquation(X=X,M=M,Y=Y,moderator=moderator))
model=modmedEquation(X=X,M=M,Y=Y,moderator=moderator)
model
cat(model)
#' @param X A character vectors indicating independent variables
#' @param M A character vectors indicating mediators
#' @param Y A character vectors indicating dependent variables
#' @param moderator moderator
#' @param labels labels
#' @export
#' @examples
#' X="X";M="M";Y="Y"
#' moderator=list(name=c("z1","z2"),site=list(c("a","b","c"),c("a","c")))
#' cat(modmedEquation(X=X,M=M,Y=Y,moderator=moderator))
modmedEquation=function(X="",M="",Y="",moderator=list(),labels=NULL){
(XM=moderator$name[str_detect(moderator$site,"a")])
(MY=moderator$name[str_detect(moderator$site,"b")])
(XY=moderator$name[str_detect(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"),"\n")
MY=c(M,MY)
XY=c(X,XY)
MYstr=interactStr(MY,prefix="b")
XYstr=interactStr(XY,prefix="c")
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"),"\n")
equation=paste0(equation,temp)
for(i in seq_along(moderator$name)){
name=moderator$name[i]
temp=paste0(name," ~ ",name,".mean*1\n")
temp=paste0(temp,name," ~~ ",name,".var*",name,"\n")
equation=paste0(equation,temp)
}
XYstr1=stringr::str_replace_all(XYstr,":","*")
MEqui=stringr::str_flatten(XMstr,"+")
MYstr1=str_replace(MYstr,M,paste0("(",MEqui,")"))
MYstr1=stringr::str_replace_all(MYstr1,":","*")
MYstr2=removeParentheses(MYstr1)
totalStr=c(XYstr1,MYstr2)
result=strGrouping(totalStr,X)
direct=result$yes
indirect=result$no
equation=paste0(equation,"direct:=",str_flatten(direct,"+"),"\n")
equation=paste0(equation,"indirect:=",str_flatten(indirect,"+"),"\n")
equation=paste0(equation,"total:=direct+indirect\n")
equation
}
X="time.c";M="pubs";Y="jobs"
moderator=list(name=c("alex.c"),site=list(c("a","c")))
cat(modmedEquation(X=X,M=M,Y=Y,moderator=moderator))
model=modmedEquation(X=X,M=M,Y=Y,moderator=moderator)
cat(model)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.height=6,
fig.width=6
)
set.seed(42) #This makes sure that everyone gets the same numbers generated through rnorm function
a1 = -.59 #Set the path a1 strength (effect of X on M)
a2 = -.17 #Set path a2 strength (effect of Z on M)
a3 = .29 #Set path a3 strength (interaction between X and Z on M)
b = .59 #Set path b strength (effect of M on Y)
cdash1 = .27 #Set path c'1 strength (effect of X on Y)
cdash2 = .01 #Set path c'2 strength (effect of Z on Y)
cdash3 = -.01 #Set path c'3 strength (interaction betwee X and Z on Y)
n <- 200 #Set sample size
X <- rnorm(n, 7, 1) #IV: Time spent in grad school (M = 7, SD = 1)
Z <- rnorm(n, 5, 1) #Moderator: Time spent (hours per week) with Professor Demos in class or in office hours (M = 5, SD = 1)
M <- a1*X + a2*Z + a3*X*Z + rnorm(n, 0, .1) #Mediator: Number of publications in grad school
#The mediator variable is created as a function of the IV, moderator, and their interaction with some random noise thrown in the mix
Y <- cdash1*X + cdash2*Z + cdash3*X*Z + b*M + rnorm(n, 0, .1) #DV: Number of job offers
#Similar to the mediator, the DV is a function of the IV, moderator, their interaction, and the mediator with some random noise thrown in the mix
Now we put it all together and make our data frame.
```{r}
Success <- data.frame(jobs = Y, time = X, pubs = M, alex = Z)
Success$time.c <- scale(Success$time, center = TRUE, scale = FALSE)[,] #Scale returns a matrix so we have to make it a vector by indexing one column
Success$alex.c <- scale(Success$alex, center = TRUE, scale = FALSE)[,]
str(Success)
require(lavaan)
X="time.c";M="pubs";Y="jobs"
moderator=list(name=c("alex.c"),site=list(c("a","c")))
model=modmedEquation(X=X,M=M,Y=Y,moderator=moderator)
fit=sem(model,data=Success)
str(Success)
cat(model)
fit=sem(model,data=Success)
fit=sem(model,data=Success)
cat(model)
str(Success)
model='pubs ~ a1*time.c+a2*alex.c+a3*alex.c:time.c
jobs ~ c1*time.c+c2*alex.c+c3*alex.c:time.c + b1*pubs
alex.c ~ alex.c.mean*1
alex.c ~~ alex.c.var*alex.c'
fit=sem(model,data=Success)
parameterEstimates(fit)
semDiagram(fit)
conceptDiagram(fit)
