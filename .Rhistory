} else  p<-p+theme_grey(base_size=base_size,base_family=base_family)
p<-p+theme(legend.position="none")
p
resTotal=res[substr(res$label,1,5)=="total",]
resTotal
mergeDataPosInd=function(resInd,res,df2,whatLabels="est",width=5,height=3){
x<-y<-latent<-label<-c()
for(i in 1:nrow(resInd)){
label=unlist(strsplit(resInd$rhs[i],"+",fixed=TRUE))
label1=unlist(strsplit(label,"*",fixed=TRUE))[1]
(lhs=res[res$label==label1,]$lhs)
df2
(tempx=df2[df2$text==lhs,]$x)
(tempy=df2[df2$text==lhs,]$y)
if(df2[df2$text==lhs,]$group3==1) {
tempy=tempy-height*3/2
} else tempy=tempy+height*3/2
(templatent=df2[df2$text==lhs,]$latent)
x=c(x,tempx)
y=c(y,tempy)
latent=c(latent,templatent)
}
resInd$x=x
resInd$y=y
resInd$latent=latent
if(whatLabels=="std") resInd$text=resInd[["std.all"]]
else if(whatLabels=="name") resInd$text=resInd$label
else resInd$text=resInd$est
if(is.numeric(resInd$text)) resInd$text=sprintf("%0.2f",resInd$text)
resInd
}
library(semMediation)
model='
knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
'
mediationModel=makeEquation(X="knowledge",M="empathy",Y="intervention")
cat(mediationModel)
model=paste0(model,mediationModel)
cat(model)
fit=sem(model,data=ADHD)
semPaths(fit,rotation=2,whatLabels = "std")
require(lavaan)
require(semPlot)
require(semPlot)
require(semMediation)
require(ggplot2)
semPaths(fit,rotation=2,whatLabels = "std")
mediationPlot(fit,whatLabels = "est",residuals = FALSE)
mediationPlot(fit,residuals = FALSE)
mediationPlot(fit,residuals = FALSE,regression=FALSE,total=TRUE)
mediationPlot(fit,residuals = FALSE,regression=FALSE,total=TRUE)
library(semMediation)
mediationPlot(fit,residuals = FALSE,regression=FALSE,total=TRUE)
mediationPlot(fit,residuals = FALSE,regression=FALSE,indirect=TRUE)
source('~/ownCloud/Documents/semMediation/R/mediationPlot.R', echo=TRUE)
source('~/ownCloud/Documents/semMediation/R/semPlot1.R', echo=TRUE)
maxx=60;maxy=30;height=5;width=5;whatLabels="name";useLabel=TRUE;usecolor=TRUE
clean=TRUE;base_size=5;base_family="Arial"
mediationOnly=FALSE;correlation=TRUE;regression=TRUE
indirect=FALSE;secondIndirect=FALSE;mode=1
res=parameterEstimates(fit,standardized=TRUE)
res
df=fit2df(fit)
df
df1=addpos(df)
df1
if(mediationOnly) {
Mgroup=df1[substr(df1$group1,1,1)=="M",]$group1
Mgroup
df1=df1[df1$group1 %in% c("X","Y",Mgroup),]
res=res[(res$label!="")|((res$lhs %in% df1$text)&(res$rhs %in% df1$text)),]
res
}
df2=adjustPos(df1,maxx=maxx,maxy=maxy,height=height,width=width)
df2
df3=df2[df2$latent==FALSE,]
df3
df4=df2[df2$latent==TRUE,]
df4
p<-ggplot(data=df2,aes_string(x="x",y="y"))+
xlim(min(df2$x)-12,max(df2$x)+12)+ylim(min(df2$y)-8,max(df2$y)+8)
p
p<-p+ geom_rect(data=df3,xmin=df3$x-width/2,xmax=df3$x+width/2,
ymin=df3$y-height/2,ymax=df3$y+height/2,color="black",fill="white",alpha=0.5)
if(usecolor) {
p<-p+ geom_rect( data = df3,aes_string(fill="group1"),xmin=df3$x-width/2,xmax=df3$x+width/2,
ymin=df3$y-height/2,ymax=df3$y+height/2,colour="black",alpha=0.5)
} else {
p<-p+ geom_rect(data=df3,xmin=df3$x-width/2,xmax=df3$x+width/2,
ymin=df3$y-height/2,ymax=df3$y+height/2,color="black",fill="white",alpha=0.5)
}
p<-ggplot(data=df2,aes_string(x="x",y="y"))+
xlim(min(df2$x)-12,max(df2$x)+12)+ylim(min(df2$y)-8,max(df2$y)+8)
p
p<-p+ geom_rect(data=df3,xmin=df3$x-width/2,xmax=df3$x+width/2,
ymin=df3$y-height/2,ymax=df3$y+height/2,color="black",fill="white",alpha=0.5)
if(nrow(df4)>0){
for(i in 1:nrow(df4)) p<-p+add_ellipse(df4$x[i],df4$y[i],height=height,width=width,fill=ifelse(usecolor,"yellow","white"))
}
p<-p+  geom_text(aes_string(label="text"),size=base_size,family=base_family)
p
if(clean) {
p<-p+theme_clean(base_size=base_size,base_family=base_family)
} else  p<-p+theme_grey(base_size=base_size,base_family=base_family)
p<-p+theme(legend.position="none")
p
p2<-p
p<-p2
resTotal=res[substr(res$label,1,5)=="total",]
resTotal
resTotal=mergeDataPosInd(resTotal,res,df2,whatLabels,height=height,width=width)
resTotal=addLinetype(resTotal)
resTotal
Reglist=unlist(strsplit(resTotal$rhs[i],"+",fixed=TRUE))
Reglist=unlist(strsplit(Reglist,"*",fixed=TRUE))
resReglist=res[res$label %in% Reglist,]
resReglist=mergeDataPos(resReglist,df2,whatLabels,height=height,width=width)
resReglist$linetype=resTotal$linetype[i]
Reglist=unlist(strsplit(resTotal$rhs[i],"+",fixed=TRUE))
Reglist=unlist(strsplit(Reglist,"*",fixed=TRUE))
resReglist=res[res$label %in% Reglist,]
(resReglist=res[res$label %in% Reglist,])
resTotal
resTotal=res[substr(res$label,1,5)=="total",]
resTotal
resTotal=mergeDataPosInd(resTotal,res,df2,whatLabels,height=height,width=width)
resTotal=addLinetype(resTotal)
resTotal
Reglist=unlist(strsplit(resTotal$rhs[i],"+",fixed=TRUE))
Reglist=unlist(strsplit(Reglist,"*",fixed=TRUE))
Reglist
resTotal
i=1
Reglist=unlist(strsplit(resTotal$rhs[i],"+",fixed=TRUE))
Reglist=unlist(strsplit(Reglist,"*",fixed=TRUE))
Reglist
(resReglist=res[res$label %in% Reglist,])
resReglist=mergeDataPos(resReglist,df2,whatLabels,height=height,width=width)
resReglist$linetype=resTotal$linetype[i]
resReglist
maxx=which.max(resReglist$xend)
maxx
select=resReglist[resReglist$xend<max(resReglist$xend),]
select
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[select,]$linetype,
color="red",alpha=0.5,size=1)
p
select
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[select,]$linetype,
color="red",alpha=0.5,size=1)
select=which(resReglist[resReglist$xend<max(resReglist$xend),])
select=resReglist$xend<max(resReglist$xend)
select
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[select,]$linetype,
color="red",alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[-select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[-select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),color="red",alpha=0.5,size=1)
p
select
-select
select
select=resReglist$xend<max(resReglist$xend)
resReglist[select,]
resReglist[-select,]
p<-p2
p
select=resReglist$xend<max(resReglist$xend)
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[select,]$linetype,
color="red",alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[-select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[-select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),color="red",alpha=0.5,size=1)
p
p<-p2
p
p<-p+geom_segment(data=resReglist[-select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[-select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),color="red",alpha=0.5,size=1)
p
resReglist[select,]
resReglist[-select,]
resReglist
select=resReglist$xend<max(resReglist$xend)
resReglist[select,]
resReglist[-select,]
resReglist
resReglist[!select,]
p<-p2
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[select,]$linetype,
color="red",alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[!select,],aes_string(x="x",y="y",xend="xend",yend="yend"),
linetype=resReglist[!select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),color="red",alpha=0.5,size=1)
p
resReglist
resReglist$effect="indirect"
resReglist[substr(resReglist$label,1,1)=="c",]
resReglist$effect="indirect"
resReglist[substr(resReglist$label,1,1)=="c",]$effect="direct"
p<-p2
p<-p+geom_segment(data=resReglist[!select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[!select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),alpha=0.5,size=1)
p
p<-p2
p
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[select,]$linetype,
alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[!select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[!select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),alpha=0.5,size=1)
p
p<-p2
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[select,]$linetype,
alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[!select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[!select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),alpha=0.5,size=1)
p
if(whatLabels!="name") p<-p+geom_label(data=resTotal,aes_string(x="x",y="y",label="text",color="effect"))
p
p
p
if(whatLabels!="name") p<-p+geom_label(data=resReglist,aes_string(x="x",y="y",label="text",color="effect"))
p
resReglist
resTotal
resReglist
summary(fit)
summary(fit,standardized= TRUE ,fit.measures= FALSE ,rsquare= FALSE ,modindices= FALSE )
semPaths(fit,rotation=2,whatLabels = "std")
semPaths(fit,rotation=2,whatLabels = "std")
mediationPlot(fit,whatLabels = "est",residuals = FALSE)
mediationPlot(fit,whatLabels = "std",residuals = FALSE)
mediationPlot(fit,whatLabels = "std",residuals = FALSE)
mediationPlot(fit,whatLabels = "std",residuals = FALSE,indirect=TRUE)
mediationPlot(fit,whatLabels = "est",residuals = FALSE,indirect=TRUE)
mediationPlot(fit,whatLabels = "std",residuals = FALSE,indirect=TRUE)
mediationPlot(fit,whatLabels = "std",residuals = FALSE,total=TRUE)
mediationPlot(fit,whatLabels = "std",residuals = FALSE,indirect=TRUE)
mediationPlot(fit,whatLabels = "std",residuals = FALSE,total=TRUE)
resTotal
resReglist
res
p<-p2
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[select,]$linetype,
alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[!select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[!select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),alpha=0.5,size=1)
p
p<-p2
p<-p+geom_segment(data=resReglist[!select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[!select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[select,]$linetype,
alpha=0.5,size=1)
p
resReglist
resTotal=res[substr(res$label,1,5)=="total",]
resTotal
res
resTotal=res[substr(res$label,1,5)=="total",]
resTotal
resTotal=mergeDataPosInd(resTotal,res,df2,whatLabels,height=height,width=width)
resTotal=addLinetype(resTotal)
resTotal
Reglist=unlist(strsplit(resTotal$rhs[i],"+",fixed=TRUE))
Reglist=unlist(strsplit(Reglist,"*",fixed=TRUE))
Reglist
(resReglist=res[res$label %in% Reglist,])
resReglist=mergeDataPos(resReglist,df2,whatLabels,height=height,width=width)
resReglist$effect="indirect"
resReglist[substr(resReglist$label,1,1)=="c",]$effect="direct"
resReglist
resReglist=addLinetype(resRegList)
resReglist=addLinetype(resReglist)
resReglist
select=resReglist$xend<max(resReglist$xend)
resReglist[select,]
resReglist[!select,]
resReglist
p<-p2
p<-p+geom_segment(data=resReglist[select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[select,]$linetype,
alpha=0.5,size=1)
p
p<-p+geom_segment(data=resReglist[!select,],aes_string(x="x",y="y",xend="xend",yend="yend",color="effect"),
linetype=resReglist[!select,]$linetype,
arrow=arrow(angle=20,length=unit(0.3,"cm"),type="closed"),alpha=0.5,size=1)
p
resReglist
select=substr(res$label,1,3)=="ind"
select
select=(substr(res$label,1,3)=="ind")|((substr(res$label,1,1)=="c"))
select
select=(substr(res$label,1,3)=="ind")|((substr(res$label,1,1)=="c"))|((substr(res$label,1,5)=="total"))
resTotal2=res[select,]
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2
select=(substr(res$label,1,3)=="ind")|((substr(res$label,1,1)=="c"))|((substr(res$label,1,5)=="total"))
(resTotal2=res[select,])
resTotal2=mergeDataPosInd(resTotal2,df2,whatLabels,height=height,width=width)
(resTotal2=res[select,])
resTotal2=mergeDataPosInd(resTotal2,res,df2,whatLabels,height=height,width=width)
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2
p
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2
select=(substr(res$label,1,3)=="ind")|((substr(res$label,1,1)=="c"))
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2
select=(substr(res$label,1,1)=="c")
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2
select=(substr(res$label,1,1)=="c")
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2$effect="direct"
select=(substr(res$label,1,3)=="ind")
(resTotal3=res[select,])
resTotal3=mergeDataPosInd(resTotal3,res,df2,whatLabels,height=height,width=width)
resTotal3$effect="indirect"
resTotal3
resTotal2
resTotal2$label=ifelse(whatLabels=="name",resTotal2$effect,ifelse(whatLabels=="est",resTotal2$est,resTotal2$std.all) )
resTotal2=resTotal2[c("x","y","label","effect")]
resTotal2
resTotal3=resTotal3[c("x","y","label","effect")]
resTotal=rbind(resTotal2,resTotal3)
p<-p+geom_label(data=resTotal,aes_string(x="x",y="y",label="label",color="effect"))
p
select=(substr(res$label,1,3)=="ind")
(resTotal3=res[select,])
resTotal3=mergeDataPos(resTotal3,df2,whatLabels,height=height,width=width)
select=(substr(res$label,1,3)=="ind")
(resTotal3=res[select,])
resTotal3=mergeDataPosInd(resTotal3,df2,whatLabels,height=height,width=width)
select=(substr(res$label,1,3)=="ind")
(resTotal3=res[select,])
resTotal3=mergeDataPosInd(resTotal3,res,df2,whatLabels,height=height,width=width)
resTotal3$effect="indirect"
resTotal3$label=ifelse(whatLabels=="name",resTotal3$effect,ifelse(whatLabels=="est",resTotal3$est,resTotal3$std.all) )
resTotal3=resTotal3[c("x","y","label","effect")]
select=(substr(res$label,1,1)=="c")
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2$effect="direct"
resTotal2$label=ifelse(whatLabels=="name",resTotal2$effect,ifelse(whatLabels=="est",resTotal2$est,resTotal2$std.all) )
resTotal2=resTotal2[c("x","y","label","effect")]
resTotal2
select=(substr(res$label,1,1)=="c")
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2$effect="direct"
resTotal2$label=ifelse(whatLabels=="name",resTotal2$effect,ifelse(whatLabels=="est",resTotal2$est,resTotal2$std.all) )
resTotal2
resTotal2$x=(resTotal2$x1+resTotal2$x2)/2
resTotal2$y=(resTotal2$y1+resTotal2$y2)/2
resTotal2=resTotal2[c("x","y","label","effect")]
resTotal2
select=(substr(res$label,1,1)=="c")
(resTotal2=res[select,])
resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)
resTotal2$effect="direct"
resTotal2$label=ifelse(whatLabels=="name",resTotal2$effect,ifelse(whatLabels=="est",resTotal2$est,resTotal2$std.all) )
resTotal2$x=(resTotal2$x1+resTotal2$x2)/2
resTotal2$y=(resTotal2$y1+resTotal2$y2)/2
resTotal2=resTotal2[c("x","y","label","effect")]
resTotal2
select=(substr(res$label,1,3)=="ind")
(resTotal3=res[select,])
resTotal3=mergeDataPosInd(resTotal3,res,df2,whatLabels,height=height,width=width)
resTotal3$effect="indirect"
resTotal3$label=ifelse(whatLabels=="name",resTotal3$effect,ifelse(whatLabels=="est",resTotal3$est,resTotal3$std.all) )
resTotal3=resTotal3[c("x","y","label","effect")]
resTotal=rbind(resTotal2,resTotal3)
p<-p+geom_label(data=resTotal,aes_string(x="x",y="y",label="label",color="effect"))
p
library(semMediation)
mediationPlot(fit)
mediationPlot(fit,mediationOnly=TRUE)
mediationPlot(fit,mediationOnly=TRUE,regression=FALSE,residauls=FALSE,total=TRUE)
mediationPlot(fit,mediationOnly=TRUE,regression=FALSE,residuals=FALSE,total=TRUE)
mediationPlot(fit,regression=FALSE,residuals=FALSE,total=TRUE)
library(semMediation)
mediationPlot(fit,regression=FALSE,residuals=FALSE,total=TRUE)
mediationPlot(fit,regression=FALSE,residuals=FALSE,total=TRUE,mediationOnly = TRUE)
library(semMediation)
require(lavaan)
require(semPlot)
require(semMediation)
require(ggplot2)
model='
knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
'
mediationModel=makeEquation(X="knowledge",M="empathy",Y="intervention")
cat(mediationModel)
model=paste0(model,mediationModel)
cat(model)
fit=sem(model,data=ADHD)
summary(fit,standardized= TRUE ,fit.measures= FALSE ,rsquare= FALSE ,modindices= FALSE )
mediationPlot(fit,whatLabels = "std",residuals = FALSE)
mediationPlot(fit,total=TRUE)
library(semMediation)
mediationPlot(fit,total=TRUE)
mediationPlot(fit,regression=FALSE,residuals=FALSE,total=TRUE)
mediationPlot(fit,regression=FALSE,residuals=FALSE,total=TRUE,mediationOnly = TRUE)
model=makeEquaiton(X=c("X1","X2"),M=c("M1","M2"),Y="Y1")
model=makeEquation(X=c("X1","X2"),M=c("M1","M2"),Y="Y1")
require(lavaan)
require(semMediation)
require(ggplot2)
model=makeEquation(X=c("X1","X2"),M=c("M1","M2"),Y="Y1")
fit=sem(model)
semPaths(fit)
require(lavaan)
require(semPlot)
require(semMediation)
require(ggplot2)
semPaths(fit)
model=makeEquation(X=c("X1","X2"),M=c("M1","M2"),Y="Y1")
model
cat(model)
fit=sem(model)
semPaths(fit)
semPaths(fit,data=data)
fit=sem(model)
semPaths(fit,data=data)
model=makeEquation(X="X1",M=c("M1","M2"),Y="Y1")
cat(model)
fit=sem(model,data=data)
set.seed(1234)
X1 <- rnorm(100)
X2 <- c(rnorm(50),rnorm(50))
M1 <- 0.5*X1 + 0.5*X2 +rnorm(100)
M2 <-0.6*X1 +0.4*X2+rnorm(100)
Y1 <- 0.3*M1 + 0.4*M2 + rnorm(100)
Y2 <- 0.1*M1 + 0.5*M2 + rnorm(100)
data <- data.frame(X1 = X1, X2 = X2, Y1 = Y1, Y2 = Y2, M1 = M1, M2 = M2)
str(data)
cat(model)
fit=sem(model,data=data)
summary(fit)
semPaths(fit,rotation=2,whatLabels = "std")
model=makeEquation(X=c("X1","X2"),M=c("M1","M2"),Y="Y1")
cat(model)
fit=sem(model)
semPaths(fit,data=data)
fit=sem(model,data=data)
semPaths(fit)
semPaths(fit)
mediationModel(fit)
mediationPlot(fit)
model=makeEquation(X=c("X1","X2"),M=c("M1","M2"),Y=c("Y1","Y2"))
cat(model)
fit=sem(model,data=data)
semPaths(fit)
mediationPlot(fit)
library(semMediation)
library(semMediation)
devtools::document()
library(semMediation)
devtools::document()
library(semMediation)
require(lavaan)
require(semPlot)
require(semPlot)
require(semMediation)
require(ggplot2)
model=makeEquation(X="X1",M=c("M1","M2"),Y="Y1")
cat(model)
fit=sem(model,data=data)
model='
knowledge =~ general+symptoms+treatmt
empathy =~ cognitiv+emotion+disposit+attitude
intervention =~ classrm+instruct
'
mediationModel=makeEquation(X="knowledge",M="empathy",Y="intervention")
cat(mediationModel)
model=paste0(model,mediationModel)
cat(model)
fit=sem(model,data=ADHD)
summary(fit,standardized= TRUE ,fit.measures= FALSE ,rsquare= FALSE ,modindices= FALSE )
fit2df(fit)
