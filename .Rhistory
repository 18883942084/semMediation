covariates.2 = list(alex.c = high.alex), sims = 10)
library(lavaan)
Mod.Med.Lavaan <- '
#Regressions
#These are the same regression equations from our previous example
#Except in this code we are naming the coefficients that are produced from the regression equations
#E.g., the regression coefficient for the effect of time on pubs is named "a1"
pubs ~ a1*time.c + a2*alex.c + a3*time.c:alex.c
jobs ~ cdash1*time.c + cdash2*alex.c + cdash3*time.c:alex.c + b1*pubs
#Mean of centered alex (for use in simple slopes)
#This is making a coefficient labeled "alex.c.mean" which equals the intercept because of the "1"
#(Y~1) gives you the intercept, which is the mean for our alex.c variable
alex.c ~ alex.c.mean*1
#Variance of centered alex (for use in simple slopes)
#This is making a coefficient labeled "alex.c.var" which equals the variance because of the "~~"
#Two tildes separating the same variable gives you the variance
alex.c ~~ alex.c.var*alex.c
#Indirect effects conditional on moderator (a1 + a3*ModValue)*b1
indirect.SDbelow := (a1 + a3*(alex.c.mean-sqrt(alex.c.var)))*b1
indirect.SDabove := (a1 + a3*(alex.c.mean+sqrt(alex.c.var)))*b1
#Direct effects conditional on moderator (cdash1 + cdash3*ModValue)
#We have to do it this way because you cannot call the mean and sd functions in lavaan package
direct.SDbelow := cdash1 + cdash3*(alex.c.mean-sqrt(alex.c.var))
direct.SDabove := cdash1 + cdash3*(alex.c.mean+sqrt(alex.c.var))
#Total effects conditional on moderator
total.SDbelow := direct.SDbelow + indirect.SDbelow
total.SDabove := direct.SDabove + indirect.SDabove
#Proportion mediated conditional on moderator
#To match the output of "mediate" package
prop.mediated.SDbelow := indirect.SDbelow / total.SDbelow
prop.mediated.SDabove := indirect.SDabove / total.SDabove
#Index of moderated mediation
#An alternative way of testing if conditional indirect effects are significantly different from each other
index.mod.med := a3*b1
'
Mod.Med.Lavaan <- '
#Regressions
#These are the same regression equations from our previous example
#Except in this code we are naming the coefficients that are produced from the regression equations
#E.g., the regression coefficient for the effect of time on pubs is named "a1"
pubs ~ a1*time.c + a2*alex.c + a3*time.c:alex.c
jobs ~ cdash1*time.c + cdash2*alex.c + cdash3*time.c:alex.c + b1*pubs
#Mean of centered alex (for use in simple slopes)
#This is making a coefficient labeled "alex.c.mean" which equals the intercept because of the "1"
#(Y~1) gives you the intercept, which is the mean for our alex.c variable
alex.c ~ alex.c.mean*1
#Variance of centered alex (for use in simple slopes)
#This is making a coefficient labeled "alex.c.var" which equals the variance because of the "~~"
#Two tildes separating the same variable gives you the variance
alex.c ~~ alex.c.var*alex.c
#Indirect effects conditional on moderator (a1 + a3*ModValue)*b1
indirect.SDbelow := (a1 + a3*(alex.c.mean-sqrt(alex.c.var)))*b1
indirect.SDabove := (a1 + a3*(alex.c.mean+sqrt(alex.c.var)))*b1
#Direct effects conditional on moderator (cdash1 + cdash3*ModValue)
#We have to do it this way because you cannot call the mean and sd functions in lavaan package
direct.SDbelow := cdash1 + cdash3*(alex.c.mean-sqrt(alex.c.var))
direct.SDabove := cdash1 + cdash3*(alex.c.mean+sqrt(alex.c.var))
#Total effects conditional on moderator
total.SDbelow := direct.SDbelow + indirect.SDbelow
total.SDabove := direct.SDabove + indirect.SDabove
#Proportion mediated conditional on moderator
#To match the output of "mediate" package
prop.mediated.SDbelow := indirect.SDbelow / total.SDbelow
prop.mediated.SDabove := indirect.SDabove / total.SDabove
#Index of moderated mediation
#An alternative way of testing if conditional indirect effects are significantly different from each other
index.mod.med := a3*b1
'
Mod.Med.SEM <- sem(model = Mod.Med.Lavaan,
data = Success.ModMed,
se = "bootstrap",
bootstrap = 10)
#Fit measures
summary(Mod.Med.SEM,
fit.measures = FALSE,
standardize = TRUE,
rsquare = TRUE)
#Bootstraps
parameterEstimates(Mod.Med.SEM,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)[c(19:27),c(4:10)] #We index the matrix to only display columns we are interested in
str(Success.ModMed)
library(semMediation)
moderator=list()
moderator=list()
moderater[[1]]$name="Z"
moderater[[1]]$site=c("a","b","c")
moderator=list()
moderator[[1]]$name="Z"
moderator=list()
moderator=list(Z=c("a","b","c"))
moderator
moderator=list(Z1=c("a","b","c"))
moderator
moderator$Z2=c("a","b")
moderator
X="X";M="M";Y="Y"
moderator=list(Z1=list(label="Z1label",site=c("a","b","c")))
moderator=list(Z1=list(label="Z1label",site=c("a","b","c")))
moderator$Z2=list(label="Z2label",site=c("a","b"))
moderator
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers",
Z="Time Spent\n with Alex")
labels
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c")))
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"))
moderator
moderator[[1]]
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c")))
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"))
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c")))
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"))
moderator[[1]]
length(moderator)
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c")))
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"))
moderator[[1]]
X="X";M="M";Y="Y"
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers",
Z="Time Spent\n with Alex")
labels
moderator
X="X";M="M";Y="Y"
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers")
labels
radx=0.12;rady=0.05;xmargin=0.03;
if(is.null(yinterval)) yinterval=rady*4
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
radx=0.12;rady=0.05;xmargin=0.03;
if(is.null(yinterval)) yinterval=rady*4
radx=0.12;rady=0.05;xmargin=0.03;yinterval=NULL
if(is.null(yinterval)) yinterval=rady*4
openplotmat()
require(diagram)
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
m=c(0.5,0.5+yinterval)
for(i in seq_along(moderator)){
if(moderator[i]$pos==3) {
temp=c(0.5,0.5-yinterval)
} else if(moderator[i]$pos==2){
temp=c(1-(radx+xmargin),0.5+yinterval)
} else{
temp=c((radx+xmargin),0.5+yinterval)
}
assign(paste0("z",i),temp)
}
for(i in seq_along(moderator)){
if(moderator[[i]]$pos==3) {
temp=c(0.5,0.5-yinterval)
} else if(moderator[i]$pos==2){
temp=c(1-(radx+xmargin),0.5+yinterval)
} else{
temp=c((radx+xmargin),0.5+yinterval)
}
assign(paste0("z",i),temp)
}
for(i in seq_along(moderator)){
if(moderator[[i]]$pos==3) {
temp=c(0.5,0.5-yinterval)
} else if(moderator[[i]]$pos==2){
temp=c(1-(radx+xmargin),0.5+yinterval)
} else{
temp=c((radx+xmargin),0.5+yinterval)
}
assign(paste0("z",i),temp)
}
xlab=ifelse(is.null(labels$X),"X",labels$X)
mlab=ifelse(is.null(labels$M),"M",labels$M)
ylab=ifelse(is.null(labels$Y),"Y",labels$Y)
myarrow(from=x,to=y,label="c'")
myarrow=function(from,to,lwd=1,adjust=1,label="",arr.pos=NULL,...){
if(is.null(arr.pos)){
if(adjust){
if(from[2]==to[2]) arr.pos=0.8
else if(from[2]>to[2]) arr.pos=0.7
else arr.pos=0.68
} else{
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
if(distance<=0.23) {
arr.pos=0.86
} else if(distance>0.5){
arr.pos=0.95
} else{
arr.pos=0.94
}
}
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
str(distance)
str(arr.pos)
}
if(label!="") {
mid=0.5*(from+to)
textplain(mid=mid,lab=label,adj=c(1,-1))
}
straightarrow(from=from,to=to,lwd=lwd,arr.pos=arr.pos,arr.type="triangle",...)
}
myarrow(from=x,to=y,label="c'")
if(!is.null(M)){
myarrow(from=x,to=m,label="a")
myarrow(from=m,to=y,label="b")
}
i=1
z=eval(parse(text=paste0("z",i)))
if("a" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+x),adjust=0)
if("b" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+y),adjust=0)
if("c" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(x+y),adjust=0)
i=2
z=eval(parse(text=paste0("z",i)))
if(!is.null(M)){
if("a" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+x),adjust=0)
if("b" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+y),adjust=0)
}
if("c" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(x+y),adjust=0)
textellipse(x,radx=radx,rady=rady,lab=xlab)
textrect(y,radx=radx,rady=rady,lab=ylab)
if(!is.null(M)) textrect(m,radx=radx,rady=rady,lab=mlab)
for(i in seq_length(moderator)){
z=eval(parse(text=paste0("z",i)))
lab=ifelse(is.null(moderator[[i]]$label),paste0("z",i),moderator[[i]]$label)
textellipse(z,radx=radx,rady=rady,lab=lab)
}
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
lab=ifelse(is.null(moderator[[i]]$label),paste0("z",i),moderator[[i]]$label)
textellipse(z,radx=radx,rady=rady,lab=lab)
}
#'Make concept Diagram
#'@importFrom diagram oppenplotmat
conceptDiagram=function(X="X",M="M",Y="Y",
radx=0.12,rady=0.05,xmargin=0.03,yinterval=NULL,
moderator=list(),labels=list()){
# radx=0.12;rady=0.05;xmargin=0.03;yinterval=NULL
if(is.null(yinterval)) yinterval=rady*4
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
m=c(0.5,0.5+yinterval)
for(i in seq_along(moderator)){
if(moderator[[i]]$pos==3) {
temp=c(0.5,0.5-yinterval+0.05)
} else if(moderator[[i]]$pos==2){
temp=c(1-(radx+xmargin),0.5+yinterval-0.05)
} else{
temp=c((radx+xmargin),0.5+yinterval-0.05)
}
assign(paste0("z",i),temp)
}
xlab=ifelse(is.null(labels$X),"X",labels$X)
mlab=ifelse(is.null(labels$M),"M",labels$M)
ylab=ifelse(is.null(labels$Y),"Y",labels$Y)
myarrow(from=x,to=y,label="c'")
if(!is.null(M)){
myarrow(from=x,to=m,label="a")
myarrow(from=m,to=y,label="b")
}
i=2
for(i in seq_length(moderator)){
z=eval(parse(text=paste0("z",i)))
if(!is.null(M)){
if("a" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+x),adjust=0)
if("b" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+y),adjust=0)
}
if("c" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(x+y),adjust=0)
}
textellipse(x,radx=radx,rady=rady,lab=xlab)
textrect(y,radx=radx,rady=rady,lab=ylab)
if(!is.null(M)) textrect(m,radx=radx,rady=rady,lab=mlab)
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
lab=ifelse(is.null(moderator[[i]]$label),paste0("z",i),moderator[[i]]$label)
textellipse(z,radx=radx,rady=rady,lab=lab)
}
}
conceptDiagram(moderator=moderator,labels=labels)
#'Make concept Diagram
#'@importFrom diagram oppenplotmat
conceptDiagram=function(X="X",M="M",Y="Y",
radx=0.12,rady=0.05,xmargin=0.03,yinterval=NULL,
moderator=list(),labels=list()){
# radx=0.12;rady=0.05;xmargin=0.03;yinterval=NULL
if(is.null(yinterval)) yinterval=rady*4
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
m=c(0.5,0.5+yinterval)
for(i in seq_along(moderator)){
if(moderator[[i]]$pos==3) {
temp=c(0.5,0.5-yinterval+0.05)
} else if(moderator[[i]]$pos==2){
temp=c(1-(radx+xmargin),0.5+yinterval-0.05)
} else{
temp=c((radx+xmargin),0.5+yinterval-0.05)
}
assign(paste0("z",i),temp)
}
xlab=ifelse(is.null(labels$X),"X",labels$X)
mlab=ifelse(is.null(labels$M),"M",labels$M)
ylab=ifelse(is.null(labels$Y),"Y",labels$Y)
myarrow(from=x,to=y,label="c'")
if(!is.null(M)){
myarrow(from=x,to=m,label="a")
myarrow(from=m,to=y,label="b")
}
i=2
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
if(!is.null(M)){
if("a" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+x),adjust=0)
if("b" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+y),adjust=0)
}
if("c" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(x+y),adjust=0)
}
textellipse(x,radx=radx,rady=rady,lab=xlab)
textrect(y,radx=radx,rady=rady,lab=ylab)
if(!is.null(M)) textrect(m,radx=radx,rady=rady,lab=mlab)
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
lab=ifelse(is.null(moderator[[i]]$label),paste0("z",i),moderator[[i]]$label)
textellipse(z,radx=radx,rady=rady,lab=lab)
}
}
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c")))
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"))
moderator
X="X";M="M";Y="Y"
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers")
conceptDiagram(moderator=moderator,labels=labels)
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"),latent=TRUE)
moderator
drawtext=function(...,latent=TRUE){
if(latent) textellipse(...)
else textrect(...)
}
#'Make concept Diagram
#'@importFrom diagram oppenplotmat
conceptDiagram=function(X="X",M="M",Y="Y",latent=rep(FALSE,3),
radx=0.12,rady=0.05,xmargin=0.03,yinterval=NULL,
moderator=list(),labels=list()){
# radx=0.12;rady=0.05;xmargin=0.03;yinterval=NULL
if(is.null(yinterval)) yinterval=rady*4
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
m=c(0.5,0.5+yinterval)
for(i in seq_along(moderator)){
if(moderator[[i]]$pos==3) {
temp=c(0.5,0.5-yinterval+0.05)
} else if(moderator[[i]]$pos==2){
temp=c(1-(radx+xmargin),0.5+yinterval-0.05)
} else{
temp=c((radx+xmargin),0.5+yinterval-0.05)
}
assign(paste0("z",i),temp)
}
xlab=ifelse(is.null(labels$X),"X",labels$X)
mlab=ifelse(is.null(labels$M),"M",labels$M)
ylab=ifelse(is.null(labels$Y),"Y",labels$Y)
myarrow(from=x,to=y,label="c'")
if(!is.null(M)){
myarrow(from=x,to=m,label="a")
myarrow(from=m,to=y,label="b")
}
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
if(!is.null(M)){
if("a" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+x),adjust=0)
if("b" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+y),adjust=0)
}
if("c" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(x+y),adjust=0)
}
drawtext(x,radx=radx,rady=rady,lab=xlab,latent=latent[1])
drawtext(y,radx=radx,rady=rady,lab=ylab,latent=latent[3])
if(!is.null(M)) {
drawtext(m,radx=radx,rady=rady,lab=ylab,latent=latent[2])
}
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
lab=ifelse(is.null(moderator[[i]]$label),paste0("z",i),moderator[[i]]$label)
drawtext(z,radx=radx,rady=rady,lab=lab,latent=moderator[[i]]$latent)
}
}
drawtext=function(...,latent=TRUE){
if(latent) textellipse(...)
else textrect(...)
}
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
moderator
X="X";M="M";Y="Y"
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers")
conceptDiagram(moderator=moderator,labels=labels)
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"),latent=TRUE)
moderator
X="X";M="M";Y="Y"
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers")
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers")
conceptDiagram(moderator=moderator,labels=labels)
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"),latent=FALSE)
conceptDiagram(moderator=moderator,labels=labels)
conceptDiagram(M=NULL,moderator=moderator,labels=labels)
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
moderator
labels=list(X="Time Spent in\n Grad School",
M="# of\n Publications",
Y="# of Job Offers")
conceptDiagram(M=NULL,moderator=moderator,labels=labels)
devtools::document()
devtools::document()
devtools::document()
library(semMediation)
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram(M=NULL,moderator=moderator,labels=labels)
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"),latent=TRUE)
conceptDiagram(moderator=moderator,labels=labels)
library(semMediation)
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram(M=NULL,moderator=moderator,labels=labels)
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"),latent=TRUE)
conceptDiagram(moderator=moderator,labels=labels)
#'Make concept Diagram
#'@importFrom diagram openplotmat
#'@examples
#'moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
#'labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
#'conceptDiagram(M=NULL,moderator=moderator,labels=labels)
#'moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"),latent=TRUE)
#'conceptDiagram(moderator=moderator,labels=labels)
#'@export
conceptDiagram=function(X="X",M="M",Y="Y",latent=rep(FALSE,3),xb=FALSE,
radx=0.12,rady=0.05,xmargin=0.03,yinterval=NULL,
moderator=list(),labels=list()){
# radx=0.12;rady=0.05;xmargin=0.03;yinterval=NULL
if(is.null(yinterval)) yinterval=rady*4
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
m=c(0.5,0.5+yinterval)
for(i in seq_along(moderator)){
if(moderator[[i]]$pos==3) {
temp=c(0.5,0.5-yinterval+0.05)
} else if(moderator[[i]]$pos==2){
temp=c(1-(radx+xmargin),0.5+yinterval-0.05)
} else{
temp=c((radx+xmargin),0.5+yinterval-0.05)
}
assign(paste0("z",i),temp)
}
xlab=ifelse(is.null(labels$X),"X",labels$X)
mlab=ifelse(is.null(labels$M),"M",labels$M)
ylab=ifelse(is.null(labels$Y),"Y",labels$Y)
myarrow(from=x,to=y,label="c'")
if(!is.null(M)){
myarrow(from=x,to=m,label="a")
myarrow(from=m,to=y,label="b")
}
if(xb) myarrow(from=x,to=0.5*(m+y))
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
if(!is.null(M)){
if("a" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+x),adjust=0)
if("b" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(m+y),adjust=0)
}
if("c" %in% moderator[[i]]$site) myarrow(from=z,to=0.5*(x+y),adjust=0)
}
drawtext(x,radx=radx,rady=rady,lab=xlab,latent=latent[1])
drawtext(y,radx=radx,rady=rady,lab=ylab,latent=latent[3])
if(!is.null(M)) {
drawtext(m,radx=radx,rady=rady,lab=ylab,latent=latent[2])
}
for(i in seq_along(moderator)){
z=eval(parse(text=paste0("z",i)))
lab=ifelse(is.null(moderator[[i]]$label),paste0("z",i),moderator[[i]]$label)
drawtext(z,radx=radx,rady=rady,lab=lab,latent=moderator[[i]]$latent)
}
}
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram(xb=TRUE,labels=labels)
library(semMediation)
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram(xb=TRUE,labels=labels)
conceptDiagram(xb=TRUE,yinterval=0.3,labels=labels)
conceptDiagram(xb=TRUE,labels=labels)
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram(xb=TRUE,labels=labels)
moderator=list(Z1=list(label="Time Spent\n with Alex",pos=3,site=c("a","b","c"),latent=FALSE))
conceptDiagram(M=NULL,moderator=moderator,labels=labels)
moderator$Z2=list(label="Z2label",pos=1,site=c("a","b"),latent=TRUE)
conceptDiagram(moderator=moderator,labels=labels)
library(semMediation)
library(semMediation)
