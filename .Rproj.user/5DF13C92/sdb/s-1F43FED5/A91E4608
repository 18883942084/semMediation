{
    "collab_server" : "",
    "contents" : "#' Draw correlation plot\n#'\n#' @param fit An object of class lavaan. Result of sem function of package lavaan\n#' @param label if 0, no label(default), if 1, use r value as label, if 2, use r value with significant mark as label\n#' @param yreverse Logical. if true, reverse the order of y axis.\n#' @param ... Further arugement to be passed on to ggCor\n#'\n#' @importFrom ggiraphExtra ggCor\n#' @importFrom ggplot2 scale_x_discrete scale_y_discrete\n#' @export\n#'\n#' @return A ggplot\n#' @examples\n#'\n#'# require(mycor)\n#'# require(ggplot)\n#'# require(ggiraphExtra)\n#'# require(lavaan)\n#'\n#'# model='\n#'# knowledge =~ general+symptoms+treatmt\n#'# empathy =~ cognitiv+emotion+disposit+attitude\n#'# intervention =~ classrm+instruct\n#'# '\n#'# mediationModel=makeEquation(X=\"knowledge\",M=\"empathy\",Y=\"intervention\")\n#'# model=paste0(model,mediationModel)\n#'# fit=sem(model,data=ADHD)\n#'# CorPlot(fit)\nCorPlot=function(fit,label=2,yreverse=TRUE,...){\n    data=fit@Data@X[[1]]\n    colnames(data)=fit@Data@ov$name\n    data=data.frame(data)\n    p<-ggCor(data,label=2,...)+scale_x_discrete(limits=colnames(data))\n    if(yreverse) p<-p+scale_y_discrete(limits=rev(colnames(data)))\n    else p<-p+scale_y_discrete(limits=colnames(data))\n    p\n}\n\n#'Extract model fit measures to data.frame\n#'\n#' @param fit An object of class lavaan. Result of sem function of package lavaan\n#' @param digits integer indicating the number of decimal places (round) or significant digits (signif) to be used.\n#' @param names names of statistic to be extracted\n#'\n#' @importFrom lavaan fitMeasures\n#' @export\n#' @return A data.frame\nmodelFitTable=function(fit,digits=2,names=NULL){\n    if(is.null(names)) {\n        names=c(\"chisq\",\"df\",\"pvalue\",\"cfi\",\"gfi\",\"agfi\",\"tli\",\"rmr\",\"srmr\",\"rmsea\",\"aic\",\"bic\")\n\n    }\n    names\n    value=fitMeasures(fit)[names]\n    value\n    res=data.frame(rbind(value))\n    rownames(res)=\"statistic\"\n    res=round(res,digits)\n    res\n}\n\n#'convert data.frame to Flextable\n#'\n#'@param df a data.frame\n#'@param bg background color of header\n#'\n#'@importFrom ReporteRs FlexTable cellProperties setZebraStyle parRight parCenter textProperties\n#'\n#'@export\n#'\n#' @return A Flextable\ndf2Flextable=function(df,bg=\"#5B7778\"){\n    colnames(df)[colnames(df)==\"\\u03B2\"]=\"&#946;\"\n    MyTable=FlexTable(df,add.rownames = FALSE\n                      , body.cell.props = cellProperties( border.color = \"#EDBD3E\")\n                      , header.cell.props = cellProperties( background.color = bg )\n                      , header.text.props = textProperties(color = \"white\",font.weight = \"bold\"))\n    MyTable=setZebraStyle( MyTable, odd = \"#DDDDDD\", even = \"#FFFFFF\" )\n    MyTable[,,to='header']=parCenter()\n    MyTable[,]=parRight()\n    MyTable\n}\n\n#'convert parameterEstimates to data.frame\n#'\n#' @param fit An object of class lavaan. Result of sem function of package lavaan\n#' @param latent whether the latent variables be included in result\n#' @param regression whether the regressions be included in result\n#' @param mediation whether the mediation effects be included in result\n#' @param covar whether the covariances be included in result\n#' @param ci If TRUE, confidence intervals are added to the output\n#' @param standardized Logical. If TRUE, standardized estimates are added to the output\n#' @param digits integer indicating the number of decimal places (round) or significant digits (signif) to be used.\n#'\n#' @export\nestimatesTable=function(fit,latent=TRUE,regression=TRUE,mediation=FALSE,covar=FALSE,ci=FALSE,standardized=TRUE,digits=2){\n    result=parameterEstimates(fit,ci=ci,standardized=standardized)\n    if(mediation){\n       result=result[result$label!=\"\",]\n       result=result[-c(2)]\n    } else{\n        include=c()\n        if(latent) include=c(include,\"=~\")\n        if(regression) include=c(include,\"~\")\n        if(covar) include=c(include,\"~~\")\n        result=result[result$op %in% include,]\n        result=result[-c(2,4)]\n    }\n    no=ncol(result)\n    result=result[-c(no-2,no)]\n    result\n    if(ci){\n        result$est=paste0(round(result$est,digits),\"(\",round(result$ci.lower,digits),\"-\",round(result$ci.upper,digits),\")\")\n        no=ncol(result)\n        result=result[-c(no-1,no-2)]\n    } else{\n        result$est=round(result$est,digits)\n    }\n    result$se=round(result$se,digits)\n    result$z=round(result$z,digits)\n    result$std.all=round(result$std.all,digits)\n    result$pvalue=convertPvalue(result$pvalue)\n    if(mediation){\n        result$lhs[substr(result$lhs,1,3)==\"ind\"]=\"indirect effect\"\n        result$lhs[substr(result$lhs,1,5)==\"total\"]=\"total effect\"\n        colnames(result)=c(\"Variables\",\"Predictors\",\"label\",\"B\",\"SE\",\"z\",\"pvalue\",\"\\u03B2\")\n\n    } else{\n        colnames(result)=c(\"Variables\",\"Predictors\",\"B\",\"SE\",\"z\",\"pvalue\",\"\\u03B2\")\n    }\n    result[is.na(result)]=\"\"\n    result\n}\n\n#' convert vector of p values to string\n#'\n#' @param x vector of p values\nconvertPvalue=function(x){\n    x=sprintf(\"%0.3f\",x)\n    x[x==\"NA\"]=\"\"\n    x[x==\"0.000\"]=\"< 0.001\"\n    x\n}\n\n\n\n\n\n",
    "created" : 1483261593966.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3247212316",
    "id" : "A91E4608",
    "lastKnownWriteTime" : 1483280237,
    "last_content_update" : 1483280237218,
    "path" : "~/ownCloud/Documents/semMediation/R/CorPlot.R",
    "project_path" : "R/CorPlot.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}