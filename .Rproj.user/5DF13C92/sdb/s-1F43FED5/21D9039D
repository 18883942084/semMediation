{
    "collab_server" : "",
    "contents" : "require(ggplot2)\nrequire(lavaan)\nrequire(plyr)\n\n#' Make a data.frame for mediationPlot\n#'\n#' @param fit An object of class lavaan. Result of sem function of package lavaan\n#'\n#'@export\nfit2df=function(fit){\n   res=parameterEstimates(fit,standardized=TRUE)\n   res\n   ## latent variable\n   res1=res[res$op!=\":=\",]\n   res1\n   text<-group<-x<-y<-latent<-c()\n   count=0\n   res1\n   for(i in 1:nrow(res1)){\n\n        temp=res1$lhs[i]\n        temp\n        if(!(temp %in% text)){\n          text=c(text,temp)\n          # whether temp is a latent varible\n          tempres=any(res1[res1$lhs==temp,]$op==\"=~\")\n          latent<-c(latent,tempres)\n          # group determination #\n          (tempgroup=seekGroup(temp,res1,group))\n\n          group=c(group,tempgroup)\n\n        }\n        temp=res1$rhs[i]\n        if(!(temp %in% text)){\n            text=c(text,temp)\n            # whether temp is a latent varible\n            tempres=any(res1[res1$lhs==temp,]$op==\"=~\")\n            latent<-c(latent,tempres)\n            # group determination #\n            (tempgroup=seekGroup(temp,res1,group))\n\n            group=c(group,tempgroup)\n\n        }\n   }\n   group\n   df=data.frame(text,latent,group,stringsAsFactors = FALSE)\n   df=addHpos(df)\n   df\n}\n\n\n#' Add horizontal position\n#'\n#' @param df A data.frame made by fit2df function\naddHpos=function(df){\n    df1=df[substr(df$group,1,1)==\"H\",]\n    df1\n    if(nrow(df1)>0){\n        for(i in 1:nrow(df1)){\n\n            temp=unlist(strsplit(df1$group[i],\",\",fixed=TRUE))[2]\n            temp\n            pos=substr(df[df$text==temp,]$group,2,2)\n            pos\n            df[df$text==df1$text[i],]$group=paste0(\"H\",pos,\",\",temp)\n        }\n    }\n    df\n}\n\n\n#'Find group with variable name\n#'\n#'@param var A string to seek\n#'@param  res A data.frame. Result of parameterEstimates function of package lavaan or subset.\nseekGroup1=function(var,res){\n\n  tempgroup<-\"\"\n  tofind<-var\n  mode<-0\n\n  res4<-res[res$op=='~',]\n\n  (Left<-res4$lhs)\n  (Right<-res4$rhs)\n\n\n  if(any(Left==tofind)) {\n     mode<-mode+1\n     #print(\"mode<-mode+1\")\n   }\n   if(any(Right==tofind)) {\n     mode<-mode+2\n     #print(\"mode<-mode+2\")\n   }\n\n   if(mode==3) {\n     tempgroup=\"M\"\n  } else if(mode==1) {\n       tempgroup=\"Y\"\n  } else if(mode==2) tempgroup=\"X\"\n\n  if(tempgroup==\"\"){\n    res5=res[res$op=='=~',]\n\n    if(tofind %in% res5$lhs) tempgroup=\"Y\"\n  }\n\n   #print(group)\n   # print(mode)\n   # print(tofind)\n   # print(Left)\n   # print(Right)\n   # print(tempgroup)\n   tempgroup\n\n}\n\n\n#'Find group with variable name\n#'\n#'@param var A string to seek\n#'@param  res A data.frame. Result of parameterEstimates function of package lavaan or subset.\n#'@param group A character vector\nseekGroup2=function(var,res,group){\n\n  res3=res[(res$rhs==var) & (res$op!=\"~~\"),]\n  temp=res3$lhs[1]\n  if(is.na(temp)) result=\"X\"\n  else result=seekGroup1(temp,res)\n  tempgroup=\"\"\n  if(result==\"X\") tempgroup=\"0\"\n  else if(substr(result,1,1)==\"M\") {\n     # print(\"\\n\")\n     # print(var)\n     # print(temp)\n     # print(result)\n     # print(group)\n    tempgroup=\"H\"\n  } else if(result==\"Y\") tempgroup=\"5\"\n  paste0(tempgroup,\",\",temp)\n}\n\n#' Count the group names start with \"M\"\n#'@param group A string vectors\ncountM=function(group){\n    result=0\n    if(length(group)>0){\n      for(i in 1:length(group)){\n          if(substr(group[i],1,1)==\"M\") result=result+1\n      }\n    }\n    result\n\n\n}\n\n\n#'Find group with variable name\n#'\n#'@param var A string to seek\n#'@param  res A data.frame. Result of parameterEstimates function of package lavaan or subset.\n#'@param group A string vector\nseekGroup=function(var,res,group){\n   (result=seekGroup1(var,res))\n   if(result==\"M\"){\n       count=countM(group)\n       result=paste0(result,count+1)\n   }\n   if(result==\"\") result=seekGroup2(var,res,group)\n   result\n}\n\n\n\n#' Add x and y position to data\n#' @param df A data.frame. Result of fit2df function\naddpos=function(df){\n  for(i in 1:nrow(df)){\n  df$group1[i]=unlist(strsplit(df$group[i],\",\",fixed=TRUE))[1]\n  df$group2[i]=ifelse(df$group[i]==df$group1[i],\"\",unlist(strsplit(df$group[i],\",\",fixed=TRUE))[2])\n  }\n  df\n  dfM=df[substr(df$group,1,1)==\"M\",]\n  (countM=nrow(dfM))\n\n\n  df$x=0\n  if(nrow(df[df$group1==\"X\",])>0) df[df$group1==\"X\",]$x=1\n  if(nrow(df[df$group1==\"M1\",])>0) df[df$group1==\"M1\",]$x=2\n  if(countM==2) {\n      if(nrow(df[df$group1==\"M2\",])>0) df[df$group1==\"M2\",]$x=2\n  } else if(countM>2){\n    condition1 <- (substr(df$group1,1,1) ==\"M\") & (as.numeric(substr(df$group1,2,2))<=(countM+1)%/%2)\n\n    if(nrow(df[condition1,])>0) df[condition1,]$x=2+as.numeric(substr(df[condition1,]$group1,2,2))-1\n    condition2 <- (substr(df$group1,1,1) ==\"M\") & (as.numeric(substr(df$group1,2,2))>(countM+1)%/%2)\n    if(countM%%2==0){\n        if(nrow(df[condition2,])>0) df[condition2,]$x=2+as.numeric(substr(df[condition2,]$group1,2,2))-1-countM%/%2\n    } else{\n        #if(nrow(df[condition2,])>0) df[condition2,]$x=2+as.numeric(substr(df[condition2,]$group1,2,2))-(countM+1)%/%2-1+ifelse(as.numeric(substr(df[condition2,]$group1,2,2))%%2==0,0,0.5)\n        if(nrow(df[condition2,])>0) df[condition2,]$x=2+as.numeric(substr(df[condition2,]$group1,2,2))-(countM+1)%/%2-0.5\n\n    }\n  }\n  if(nrow(df[df$group1==\"H\",])>0) df[df$group1==\"H\",]$x=3\n  if(nrow(df[df$group1==\"Y\",])>0) df[df$group1==\"Y\",]$x=3+ifelse(countM>2,(countM-1) %/% 2,0)\n  if(nrow(df[df$group1==\"5\",])>0) df[df$group1==\"5\",]$x=4+ifelse(countM>2,(countM-1) %/% 2,0)\n\n\n\n  df$y=1\n  if(nrow(df>2)){\n     for(i in 2:nrow(df)){\n       if(substr(df$group1[i],1,1)!=\"H\"){\n          if(df$group1[i]==df$group1[i-1]) df$y[i]=df$y[i-1]+1\n       } else{\n          if(df$group2[i]==df$group2[i-1]) df$y[i]=df$y[i-1]+1\n       }\n     }\n  }\n\n  for(i in 1:countM){\n\n      if(nrow(df[df$group1==paste0(\"H\",i),])>0) df[df$group1==paste0(\"H\",i),]$x= df[df$group1==paste0(\"M\",i),]$x\n  }\n  if(countM>0) {\n    condition=substr(df$group,1,1)==\"M\"\n    if(nrow(df[condition,])>0) df[condition,]$y=ifelse(as.numeric(substr(df[condition,]$group1,2,2))<=(countM+1)%/%2,1,2)\n  }\n  if(nrow(df[substr(df$group1,1,1)==\"H\",])>0){\n    condition=substr(df$group,1,1)==\"H\"\n    if(nrow(df[condition,])>0) df[condition,]$y=ifelse(as.numeric(substr(df[condition,]$group1,2,2))<=(countM+1)%/%2,1,2)\n  }\n  df\n}\n\n\n#' Make a positions\n#'\n#' @param center A number indicating the center position\n#' @param step A number indicating the intervals betweeon items\n#' @param count A number indicating the count of items\njitterPos=function(center,step,count){\n\n\n   if(count==1) {\n     result=center\n   } else if(count>1){\n     step=step+1\n     start=center-(count-1)*step*0.5\n     result=c()\n     for(i in 1:count){\n         result=c(result,start+step*(i-1))\n     }\n   }\n   result\n}\n\n\n#' Make a positions\n#'\n#' @param start A number indicating the start position\n#' @param end A number indicating the end position\n#' @param count A number indicating the count of items\ndistributePos=function(start,end,count){\n  if(count==1) result=(start+end)/2\n  else {\n    (interval=(end-start)/(count-1))\n    (result=seq(start,end,interval))\n    #result=result[2:(length(result)-1)]\n  }\n  result\n}\n\n\n#' Adjust position for arrows\n#'\n#'@param df A data.frame\n#'@param maxx maximum x position\n#'@param maxy maximum y position\n#'@param height A number indicating height of the rectangle\n#'@param width A number indicating width of the rectangle\nadjustPos=function(df,maxx=60,maxy=30,height=3,width=5){\n\n  #df=df1;maxx=60;maxy=30;height=3;width=5\n  df$group3=df$y\n  count<-nrow(df[df$group1==\"0\",])\n  count<-c(count,nrow(df[df$group1==\"X\",]))\n  count<-c(count,nrow(df[substr(df$group1,1,1)==\"M\",]))\n  count<-c(count,nrow(df[df$group1==\"Y\",]))\n  count<-c(count,nrow(df[df$group1==\"5\",]))\n  countH<-nrow(df[substr(df$group1,1,1)==\"H\",])\n  countH\n  count\n\n  ## maxrow 및 maxcol 계산\n  res=plyr::ddply(df,\"group1\",nrow)\n  res\n  (maxrow=max(res[nchar(res$group1)==1,]$V1))\n\n  res$xpos=3\n  condition1<- (nchar(res$group1)==2)&(as.numeric(substr(res$group1,2,2))<=(count[3]+1)%/%2)\n  if(nrow(res[condition1,])>0) res[condition1,]$xpos=2\n  if(nrow(res[nchar(res$group1)==1,])>0) res[nchar(res$group1)==1,]$xpos=1\n\n  ## maxgroup :  group count except \"H\"\n  (maxgroup=nrow(res[substr(res$group1,1,1)!=\"H\",]))\n  upperCol=res[(substr(res$group1,1,1)==\"H\")&(res$xpos==2),]\n  lowerCol=res[(substr(res$group1,1,1)==\"H\")&(res$xpos==3),]\n  (maxcol=maxgroup+max(sum(upperCol$V1-1),sum(lowerCol$V1-1)))\n\n  maxcol\n\n\n  starty=25\n  endy=min(starty-(height+1)*(maxrow+1),5)\n  endy\n\n\n  mediation=0\n  if(count[3]>0) mediation=1\n\n  minx=5\n  (stepx=5*3)\n  (maxx=max(maxx,(maxgroup-1)*stepx+2*minx))\n\n  (xpos=seq(minx,maxx,stepx))\n\n  x<-y<-text<-group<-c()\n\n  ## group1==\"X\"\n  if(count[2]>0) for(i in 1:count[2]){\n\n    x=xpos[2]\n\n    if(nrow(df[df$group1==\"X\",])>0){\n       df[df$group1==\"X\",]$x=x\n       df[df$group1==\"X\",]$y=distributePos(starty+2,endy-2,count[2])\n    }\n  }\n\n  # group1==\"0\"\n  if(count[1]>0)  for(i in 1:count[1]){\n\n    x=xpos[1]\n    if(nrow(df[df$group1==\"0\",])>0){\n    df[df$group1==\"0\",]$x=x\n    df[df$group1==\"0\",]$y=distributePos(starty,endy,count[1])\n    }\n  }\n\n  # group1==\"Y\"\n\n  if(count[4]>0) {\n\n\n      if(nrow(df[df$group1==\"Y\",])>0){\n    df[df$group1==\"Y\",]$x=df[df$group1==\"Y\",]$x*stepx+minx\n    # df[df$group1==\"Y\",]$y=distributePos(starty,min(5,starty-count[4]*(height+1)),count[4])\n    df[df$group1==\"Y\",]$y=distributePos(starty,endy,count[4])\n      }\n  }\n\n  # group1==\"5\"\n\n  if(count[5]>0) {\n      if(nrow(df[df$group1==\"5\",])>0){\n    df[df$group1==\"5\",]$x=df[df$group1==\"5\",]$x*stepx+minx\n    df[df$group1==\"5\",]$y=distributePos(starty,endy,count[5])\n      }\n  }\n\n  df\n  # group1==\"M\"\n  if(count[3]>0) {\n      if(nrow(df[substr(df$group,1,1)==\"M\",])>0){\n    (df[substr(df$group,1,1)==\"M\",]$x=df[substr(df$group,1,1)==\"M\",]$x*stepx+minx)\n      }\n\n    condition<-(substr(df$group,1,1)==\"M\")&(df$y==1)\n    if(nrow(df[condition,])>0){\n    df[condition,]$y=(starty+endy)/2+stepx+height/2\n    }\n    condition2<-(substr(df$group,1,1)==\"M\")&(df$y==2)\n    if(nrow(df[condition2,])>0){\n    df[condition2,]$y=(starty+endy)/2-stepx-height/2\n    }\n\n  }\n\n  # group1==\"H\"\n  if(countH>0) {\n\n    condition<-(substr(df$group,1,1)==\"H\")&(df$y==1)\n    tempcount=nrow(df[condition,])\n    if(tempcount>0){\n          df[condition,]$y=(starty+endy)/2+stepx*2+height/2\n          df[condition,]$x=jitterPos(mean(unique(df[condition,]$x))*stepx+minx,width+1,tempcount)\n    }\n    condition2<-(substr(df$group,1,1)==\"H\")&(df$y==2)\n    tempcount2=nrow(df[condition2,])\n    if(tempcount2>0){\n      df[condition2,]$y=(starty+endy)/2-stepx*2-height/2\n      df[condition2,]$x=jitterPos(mean(unique(df[condition2,]$x))*stepx+minx,width+1,tempcount2)\n    }\n\n\n  }\n\n  df\n\n}\n\n\n#' Make a data.frame fof ellipse\n#' @param hlaxa An integer\n#' @param hlaxb An integer\n#' @param theta An integer\n#' @param xc An integer indicating center of x position\n#' @param yc An integer indicating center of y position\n#' @param npoints An integer\nellipse=function (hlaxa = 1, hlaxb = 1, theta = 0, xc = 0, yc = 0,\n                  npoints = 100)\n{\n  a <- seq(0, 2 * pi, length = npoints + 1)\n  x <- hlaxa * cos(a)\n  y <- hlaxb * sin(a)\n  alpha <- angle(x, y)\n  rad <- sqrt(x^2 + y^2)\n  xp <- rad * cos(alpha + theta) + xc\n  yp <- rad * sin(alpha + theta) + yc\n  #if (newplot)\n  #    plot(xp, yp, type = \"l\", ...)\n  #else lines(xp, yp, ...)\n  #invisible()\n  df=data.frame(x=xp,y=yp)\n  df\n}\n\n\n#' Calculate angle\n#'\n#' @param x An integer\n#' @param y An integer\nangle=function (x, y)\n{\n  angle2 <- function(xy) {\n    x <- xy[1]\n    y <- xy[2]\n    if (x > 0) {\n      atan(y/x)\n    }\n    else {\n      if (x < 0 & y != 0) {\n        atan(y/x) + sign(y) * pi\n      }\n      else {\n        if (x < 0 & y == 0) {\n          pi\n        }\n        else {\n          if (y != 0) {\n            (sign(y) * pi)/2\n          }\n          else {\n            NA\n          }\n        }\n      }\n    }\n  }\n  apply(cbind(x, y), 1, angle2)\n}\n\n\n#' Make an ellipse\n#' @param x An integer indicating x position\n#' @param y An integer indicating y position\n#' @param theta An integer\n#' @param height An integer\n#' @param width An integer\n#' @param npoints An integer\n#' @param color A string indicating color\n#' @param fill A string indicating color\n#' @param ... further arguments to be passed to geom_polygon\n#'\n#' @importFrom ggplot2 geom_polygon aes\nadd_ellipse=function(x=0,y=0, theta = 0, height=height,width=width,\n                     npoints = 100,color=\"black\",fill=\"white\",...){\n  ## xr=4\n  xr=4*width/5\n  ## yr=1.5\n  yr=height/2\n  df1=ellipse(xr,yr,theta=theta,xc=x,yc=y,npoints=npoints)\n  geom_polygon(data=df1,aes(x=x,y=y),color=color,fill=fill,...)\n\n}\n\n\n#' Merge Data with position\n#' @param res A data.frame. Result of parameterEstimates function of package lavaan or subset.\n#' @param df2 A data.grame\n#' @param whatLabels What should the edge labels indicate in the path diagram? Choices are c(\"est\",\"std\",\"name\").\n#'@param width A number indicating width of the rectangle\n#'@param height A number indicating height of the rectangle\nmergeDataPos=function(res,df2,whatLabels=\"est\",width=5,height=3){\n  #  res<-resCor;whatLabels=\"est\";width=5;height=3\n  x<-y<-xend<-yend<-label<-curvature<-group<-position1<-c()\n  x1<-y1<-x2<-y2<-start<-end<-c()\n  res\n  for(i in 1:nrow(res)){\n    tempcurvature=-0.3\n    tempx=df2[df2$text==res$rhs[i],]$x\n    tempy=df2[df2$text==res$rhs[i],]$y\n    tempxend=df2[df2$text==res$lhs[i],]$x\n    tempyend=df2[df2$text==res$lhs[i],]$y\n    latent=df2[df2$text==res$lhs[i],]$latent\n    x1=c(x1,df2[df2$text==res$lhs[i],]$x)\n    y1=c(y1,df2[df2$text==res$lhs[i],]$y)\n    x2=c(x2,df2[df2$text==res$rhs[i],]$x)\n    y2=c(y2,df2[df2$text==res$rhs[i],]$y)\n    start=c(start,ifelse(df2[df2$text==res$lhs[i],]$latent,\"ellipse\",\"rect\"))\n    end=c(end,ifelse(df2[df2$text==res$rhs[i],]$latent,\"ellipse\",\"rect\"))\n\n    ## Correlation\n    if(res$lhs[i]==res$rhs[i]) {\n      margin=height/3\n      tempcurvature=-2\n      tempgroup=df2[df2$text==res$lhs[i],]$group1\n      (H1group=df2[(substr(df2$group1,1,1)==\"H\")&(df2$group3==1),]$group1)\n      (H2group=df2[(substr(df2$group1,1,1)==\"H\")&(df2$group3==2),]$group1)\n      (M1group=df2[(substr(df2$group1,1,1)==\"M\")&(df2$group3==1),]$group1)\n      (M2group=df2[(substr(df2$group1,1,1)==\"M\")&(df2$group3==2),]$group1)\n\n      if(tempgroup %in% c(\"0\",M1group,M2group)) {\n        tempx=tempx-width/2-ifelse(latent,width/10,0)\n        tempy=tempy-height/3\n        tempxend=tempxend-width/2-ifelse(latent,width/10,0)\n        tempyend=tempyend+height/3\n        position=1\n      }\n      if(tempgroup %in% H1group){\n        tempx=tempx-margin\n        tempy=tempy+height/2\n        tempxend=tempxend+margin\n        tempyend=tempyend+height/2\n        position=2\n      }\n      if(tempgroup==\"5\"){\n        tempcurvature=2\n        tempx=tempx+width/2\n        tempy=tempy-margin\n        tempxend=tempxend+width/2\n        tempyend=tempyend+margin\n        position=3\n      }\n\n\n      if(tempgroup %in% c(\"X\",\"Y\")) {\n          tempcurvature=2\n          tempx=tempx-margin\n          tempy=tempy-height/2\n          tempxend=tempxend+margin\n          tempyend=tempyend-height/2\n          position=4\n      }\n      if(tempgroup %in% H2group) {\n        tempcurvature=2\n        tempx=tempx-margin\n        tempy=tempy-height/2\n        tempxend=tempxend+margin\n        tempyend=tempyend-height/2\n        position=4\n      }\n\n\n\n    } else if(res$op[i]==\"=~\") {\n      tempgroup1=df2[df2$text==res$rhs[i],]$group1\n      if(length(tempgroup1)>0){\n      if(tempgroup1==\"0\") tempx=tempx+width/2\n\n      (H1group=df2[(substr(df2$group1,1,1)==\"H\")&(df2$group3==1),]$group1)\n      (H2group=df2[(substr(df2$group1,1,1)==\"H\")&(df2$group3==2),]$group1)\n      (M1group=df2[(substr(df2$group1,1,1)==\"M\")&(df2$group3==1),]$group1)\n      (M2group=df2[(substr(df2$group1,1,1)==\"M\")&(df2$group3==2),]$group1)\n      if(tempgroup1 %in% H1group) tempy=tempy-height/2\n      if(tempgroup1 %in% H2group) tempy=tempy+height/2\n      if(tempgroup1==\"5\") tempx=tempx-width/2\n      }\n      tempgroup=df2[df2$text==res$lhs[i],]$group1\n      if(length(tempgroup)>0){\n      if(tempgroup %in% M1group) tempyend=tempyend+height/2\n      if(tempgroup %in% M2group) tempyend=tempyend-height/2\n      if(tempgroup==\"Y\") tempxend=tempxend+width/2+ifelse(latent,width*3/10,0)\n      if(tempgroup==\"X\") tempxend=tempxend-width/2-ifelse(latent,width*3/10,0)\n      }\n    } else if(res$op[i] %in% c(\"~\",\"~~\")) {\n      position=1\n      tempgroup1=df2[df2$text==res$rhs[i],]$group1\n      if(length(tempgroup1)>0){\n      (H1group=df2[(substr(df2$group1,1,1)==\"H\")&(df2$group3==1),]$group1)\n      (H2group=df2[(substr(df2$group1,1,1)==\"H\")&(df2$group3==2),]$group1)\n      (M1group=df2[(substr(df2$group1,1,1)==\"M\")&(df2$group3==1),]$group1)\n      (M2group=df2[(substr(df2$group1,1,1)==\"M\")&(df2$group3==2),]$group1)\n      latent=df2[df2$text==res$rhs[i],]$latent\n      if(tempgroup1==\"0\") tempx=tempx+width/2\n      if(tempgroup1 %in% H1group) tempy=tempy-height/2\n      if(tempgroup1 %in% H2group) tempy=tempy+height/2\n      if(tempgroup1==\"5\") tempx=tempx-width/2\n      if(tempgroup1 %in% M1group) tempy=tempy-height/2\n      if(tempgroup1 %in% M2group) tempy=tempy+height/2\n      if(tempgroup1==\"Y\") tempx=tempx-width/2-ifelse(latent,width*3/10,0)\n      if(tempgroup1==\"X\") tempx=tempx+width/2+ifelse(latent,width*3/10,0)\n      }\n      tempgroup=df2[df2$text==res$lhs[i],]$group1\n      if(length(tempgroup)>0){\n      latent=df2[df2$text==res$lhs[i],]$latent\n      if(tempgroup==\"0\") tempxend=tempxend+width/2\n      if(tempgroup %in% H1group) tempyend=tempyend-height/2\n      if(tempgroup %in% H2group) tempyend=tempyend+height/2\n      if(tempgroup==\"5\") tempxend=tempxend-width/2\n      if(tempgroup %in% M1group) tempyend=tempyend-height/2\n      if(tempgroup %in% M2group) tempyend=tempyend+height/2\n\n      if(tempgroup==\"Y\") {\n        tempxend=tempxend-width/2-ifelse(latent,width*3/10,0)\n        position=1\n      }\n      if(tempgroup==\"X\") tempxend=tempxend+width/2+ifelse(latent,width*3/10,0)\n\n      }\n    }\n    x=c(x,tempx)\n    y=c(y,tempy)\n    xend=c(xend,tempxend)\n    yend=c(yend,tempyend)\n    #df2\n    if(res$op[i]==\"~~\") {\n      curvature=c(curvature,tempcurvature)\n      group=c(group,tempgroup)\n      position1=c(position1,position)\n    }\n  }\n  res$x=x\n  res$y=y\n  res$xend=xend\n  res$yend=yend\n  res$x1=x1\n  res$y1=y1\n  res$x2=x2\n  res$y2=y2\n  res$start=start\n  res$end=end\n\n  if(res$op[i]==\"~~\") {\n    res$curvature=curvature\n    res$group=group\n    res$position=position1\n\n  }\n  if(whatLabels==\"std\") res$text=res[[\"std.all\"]]\n  else if(whatLabels==\"name\") res$text=res$label\n  else res$text=res$est\n  if(is.numeric(res$text)) res$text=sprintf(\"%0.2f\",res$text)\n  select=((res$op==\"~~\")&(res$lhs!=res$rhs)&(res$group==\"X\"))\n  if(sum(select)>0){\n      res[select,]$x= res[select,]$x1-width/2\n      res[select,]$xend= res[select,]$x2-width/2\n      res[select,]$curvature=-0.3\n      res[select,]$position=1\n  }\n  select=((res$op==\"~~\")&(res$lhs!=res$rhs)&(res$group==\"Y\"))\n  if(sum(select)>0){\n      res[select,]$x= res[select,]$x1+width/2\n      res[select,]$xend= res[select,]$x2+width/2\n      res[select,]$curvature=0.3\n      res[select,]$position=3\n  }\n  select=((res$op==\"~~\")&(res$lhs!=res$rhs)&(res$group==\"H1\"))\n  if(sum(select)>0){\n      res[select,]$x= res[select,]$x1\n      res[select,]$xend = res[select,]$x2\n      res[select,]$y = res[select,]$y1+height/2\n      res[select,]$yend = res[select,]$y2+height/2\n      res[select,]$curvature=-0.3\n      res[select,]$position=2\n      #print(res[select,])\n  }\n  select=((res$op==\"~~\")&(res$lhs!=res$rhs)&(res$group==\"5\"))\n  if(sum(select)>0){\n      res[select,]$x= res[select,]$x1+width/2\n      res[select,]$xend = res[select,]$x2+width/2\n      res[select,]$y = res[select,]$y1\n      res[select,]$yend = res[select,]$y2\n      res[select,]$curvature=-0.3\n      res[select,]$position=3\n      #print(res[select,])\n  }\n  res\n\n}\n\n#' Merge Data with position for the indirect effect\n#' @param resInd A data.frame.A subset of result of parameterEstimates function of package lavaan\n#' @param res A data.frame. Result of parameterEstimates function of package lavaan or subset.\n#' @param df2 A data.grame\n#' @param whatLabels What should the edge labels indicate in the path diagram? Choices are c(\"est\",\"std\",\"name\").\n#'@param width A number indicating width of the rectangle\n#'@param height A number indicating height of the rectangle\nmergeDataPosInd=function(resInd,res,df2,whatLabels=\"est\",width=5,height=3){\n  x<-y<-latent<-label<-c()\n\n  for(i in 1:nrow(resInd)){\n    label=unlist(strsplit(resInd$rhs[i],\"+\",fixed=TRUE))\n    label1=unlist(strsplit(label,\"*\",fixed=TRUE))[1]\n    (lhs=res[res$label==label1,]$lhs)\n    df2\n    (tempx=df2[df2$text==lhs,]$x)\n    (tempy=df2[df2$text==lhs,]$y)\n\n    if(df2[df2$text==lhs,]$group3==1) {\n      tempy=tempy-height*3/2\n    } else tempy=tempy+height*3/2\n    (templatent=df2[df2$text==lhs,]$latent)\n    x=c(x,tempx)\n    y=c(y,tempy)\n    latent=c(latent,templatent)\n  }\n  resInd$x=x\n  resInd$y=y\n  resInd$latent=latent\n  if(whatLabels==\"std\") resInd$text=resInd[[\"std.all\"]]\n  else if(whatLabels==\"name\") resInd$text=resInd$label\n  else resInd$text=resInd$est\n  if(is.numeric(resInd$text)) resInd$text=sprintf(\"%0.2f\",resInd$text)\n  resInd\n}\n\n#' Merge Data with position for the 2nd indirect effect\n#' @param res2Ind A data.frame.A subset of result of parameterEstimates function of package lavaan\n#' @param res A data.frame. Result of parameterEstimates function of package lavaan or subset.\n#' @param df2 A data.grame\n#' @param whatLabels What should the edge labels indicate in the path diagram? Choices are c(\"est\",\"std\",\"name\").\n#'@param width A number indicating width of the rectangle\n#'@param height A number indicating height of the rectangle\nmergeDataPos2Ind=function(res2Ind,res,df2,whatLabels=\"est\",width=5,height=3){\n  x<-y<-latent<-label<-c()\n\n  resInd=res2Ind\n  resInd\n  for(i in 1:nrow(resInd)){\n\n    (label1=unlist(strsplit(resInd$rhs[i],\"*\",fixed=TRUE))[1])\n    (lhs=res[res$label==label1,]$lhs)\n    (tempx=df2[df2$text==lhs,]$x)\n    (tempy=df2[df2$text==lhs,]$y)\n    (label2=unlist(strsplit(resInd$rhs[i],\"*\",fixed=TRUE))[2])\n    (lhs2=res[res$label==label2,]$lhs)\n    (tempy2=df2[df2$text==lhs2,]$y)\n    tempy=(tempy+tempy2)/2\n    (templatent=df2[df2$text==lhs,]$latent)\n    x=c(x,tempx)\n    y=c(y,tempy)\n    latent=c(latent,templatent)\n  }\n  resInd$x=x\n  resInd$y=y\n  resInd$latent=latent\n  if(whatLabels==\"std\") resInd$text=resInd[[\"std.all\"]]\n  else if(whatLabels==\"name\") resInd$text=resInd$label\n  else resInd$text=resInd$est\n  if(is.numeric(resInd$text)) resInd$text=sprintf(\"%0.2f\",resInd$text)\n  resInd\n}\n\n\n#' Add line type\n#' @param res A data.frame. Result of parameterEstimates function of package lavaan or subset.\naddLinetype=function(res){\n  res$linetype=\"solid\"\n  if(nrow(res[is.na(res$pvalue),])>0) res[is.na(res$pvalue),]$linetype=\"dotted\"\n  if(nrow(res[(res$linetype==\"solid\")&(res$pvalue>0.05),])>0) {\n    res[(res$linetype==\"solid\")&(res$pvalue>0.05),]$linetype=\"dotted\"\n  }\n  res\n}\n\n\n#' Make a clean theme for ggplot\n#' @param base_size An integer indicating base font size\n#' @param base_family A character indicating base font family\n#'\n#' @importFrom ggplot2 theme_grey element_blank %+replace%\ntheme_clean=function(base_size=12,base_family=\"NanumGothic\"){\n    theme_grey(base_size,base_family=base_family) %+replace%\n        theme(\n            axis.title=element_blank(),\n            axis.text=element_blank(),\n            panel.background=element_blank(),\n            panel.grid=element_blank(),\n            axis.ticks.length=unit(0,\"cm\"),\n            #axis.ticks.margin=unit(0,\"cm\"),\n            panel.spacing=unit(0,\"lines\"),\n            plot.margin=unit(c(0,0,0,0),\"lines\"),\n            complete=TRUE\n        )\n}\n\n\n#' Make a data.frame for mediationPlot\n#'\n#'@param fit A data.frame. Result of parameterEstimates function of package lavaan\n#'@param maxx An integer indicating maximum x position\n#'@param maxy An integer indicating maximum y position\n#'@param height A number indicating height of the rectangle\n#'@param width A number indicating width of the rectangle\n#'@param whatLabels What should the edge labels indicate in the path diagram? Choices are c(\"est\",\"std\",\"name\").\n#'@param useLabel Whether use geom_label instead of geom_text. Default value is FALSE.\n#'@param usecolor Whether use colors for variables. Default value is TRUE.\n#'@param clean Whether use theme_clean. Default value is TRUE.\n#'@param base_size An integer indicating the font size.\n#'@param base_family A character indicating base font family\n#'@param mediationOnly Whether or not draw mediation effect only. Default value is FALSE.\n#'@param residuals Whether or not draw residuals(and variance). Default value is TRUE.\n#'@param regression Whether or not draw regression. Default value is TRUE.\n#'@param indirect Whether or not draw indirect effects. Default value is FALSE.\n#'@param secondIndirect Whether or not draw 2nd indirect effects. Default value is FALSE.\n#'@param total Whether or not draw total effect. Default value is FALSE.\n#'@param mode  plot mode. 1 or 2.\n#'\n#'@importFrom lavaan parameterEstimates\n#'@importFrom ggplot2 ggplot geom_rect geom_text theme_gray theme geom_label geom_segment geom_curve geom_text xlim ylim aes_string coord_fixed\n#'\n#'@export\nmediationPlot=function(fit,maxx=60,maxy=30,height=5,width=5,whatLabels=\"std\",useLabel=FALSE,usecolor=TRUE,\n                       clean=TRUE,base_size=5,base_family=\"Arial\",\n                       mediationOnly=FALSE,residuals=TRUE,regression=TRUE,\n                       indirect=FALSE,secondIndirect=FALSE,total=FALSE,mode=1){\n\n   # maxx=60;maxy=30;height=5;width=5;whatLabels=\"name\";useLabel=TRUE;usecolor=TRUE\n   # clean=TRUE;base_size=5;base_family=\"Arial\"\n   # mediationOnly=FALSE;correlation=TRUE;regression=TRUE\n   #  indirect=FALSE;secondIndirect=FALSE;mode=1\n\n  res=parameterEstimates(fit,standardized=TRUE)\n  res\n  #str(res)\n  df=fit2df(fit)\n  df\n  #str(df)\n  df1=addpos(df)\n  df1\n\n  if(mediationOnly) {\n    Mgroup=df1[substr(df1$group1,1,1)==\"M\",]$group1\n    Mgroup\n    df1=df1[df1$group1 %in% c(\"X\",\"Y\",Mgroup),]\n    res=res[(res$label!=\"\")|((res$lhs %in% df1$text)&(res$rhs %in% df1$text)),]\n    res\n  }\n  #str(df1)\n\n  df2=adjustPos(df1,maxx=maxx,maxy=maxy,height=height,width=width)\n  df2\n  #cat(\"df2\")\n  #str(df2)\n  df3=df2[df2$latent==FALSE,]\n  df3\n  df4=df2[df2$latent==TRUE,]\n  df4\n\n\n  p<-ggplot(data=df2,aes_string(x=\"x\",y=\"y\"))+\n    xlim(min(df2$x)-12,max(df2$x)+12)+ylim(min(df2$y)-8,max(df2$y)+8)\n  p\n  if(nrow(df3)>0){\n      if(usecolor) {\n          p<-p+ geom_rect( data = df3,aes_string(fill=\"group1\"),xmin=df3$x-width/2,xmax=df3$x+width/2,\n                          ymin=df3$y-height/2,ymax=df3$y+height/2,colour=\"black\",alpha=0.5)\n      } else {\n          p<-p+ geom_rect(data=df3,xmin=df3$x-width/2,xmax=df3$x+width/2,\n                          ymin=df3$y-height/2,ymax=df3$y+height/2,color=\"black\",fill=\"white\",alpha=0.5)\n      }\n  }\n\n  if(nrow(df4)>0){\n      for(i in 1:nrow(df4)) p<-p+add_ellipse(df4$x[i],df4$y[i],height=height,width=width,fill=ifelse(usecolor,\"yellow\",\"white\"))\n  }\n  p<-p+  geom_text(aes_string(label=\"text\"),size=base_size,family=base_family)\n\n  p\n   #geom_point(data=df4,aes(fill=group1),size=30,shape=21)+\n\n  if(clean) {\n    p<-p+theme_clean(base_size=base_size,base_family=base_family)\n  } else  p<-p+theme_grey(base_size=base_size,base_family=base_family)\n\n  p<-p+theme(legend.position=\"none\")\n\n  p\n  ## Measure\n  p2<-p\n  p<-p2\n  #whatLabels=\"est\"\n  resMeasure=res[res$op==\"=~\",]\n  resMeasure\n  df2\n  if(nrow(resMeasure)>0){\n  resMeasure=mergeDataPos(resMeasure,df2,whatLabels,height=height,width=width)\n  resMeasure=addLinetype(resMeasure)\n  resMeasure\n  if(mode==1){\n        for(i in 1:nrow(resMeasure)){\n            p<-p+addline(x1=resMeasure$x1[i],y1=resMeasure$y1[i],x2=resMeasure$x2[i],y2=resMeasure$y2[i],\n               start=resMeasure$start[i],end=resMeasure$end[i],linetype=resMeasure$linetype[i],height=height,width=width)\n            if(whatLabels!=\"name\")\n            p<-p+addlabel(x1=resMeasure$x1[i],y1=resMeasure$y1[i],x2=resMeasure$x2[i],y2=resMeasure$y2[i],\n                          start=resMeasure$start[i],end=resMeasure$end[i],label=resMeasure$text[i],\n                          useLabel=useLabel)\n        }\n        p\n  } else{\n\n        p<-p+geom_segment(data=resMeasure,aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                    linetype=resMeasure$linetype,\n                    arrow=arrow(angle=20,length=unit(0.3,\"cm\"),ends=\"first\",type=\"closed\"))\n        if(whatLabels!=\"name\"){\n        if(useLabel) p<-p+geom_label(data=resMeasure,aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2\",label=\"text\"))\n        else p<-p+geom_label(data=resMeasure,aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2\",label=\"text\"),label.size=0)\n        }\n\n  }\n\n  }\n  p\n  p2<-p\n  p<-p2\n\n  ## Regressions\n\n  if(regression){\n  resReg=res[res$op==\"~\",]\n  resReg\n  if(nrow(resReg)>0){\n  resReg=mergeDataPos(resReg,df2,whatLabels,height=height,width=width)\n  resReg=addLinetype(resReg)\n  resReg\n  if(mode==1){\n      for(i in 1:nrow(resReg)){\n          #if(resReg$linetype[i]==\"dotted\") next\n          #i=10\n          if(whatLabels==\"name\"){\n              p<-p+addline(x1=resReg$x2[i],y1=resReg$y2[i],x2=resReg$x1[i],y2=resReg$y1[i],\n                           start=resReg$start[i],end=resReg$end[i],height=height,width=width)\n          } else{\n             p<-p+addline(x1=resReg$x2[i],y1=resReg$y2[i],x2=resReg$x1[i],y2=resReg$y1[i],\n                       start=resReg$start[i],end=resReg$end[i],linetype=resReg$linetype[i],height=height,width=width)\n          }\n          p\n\n      }\n      for(i in 1:nrow(resReg)){\n\n          p<-p+addlabel(x1=resReg$x2[i],y1=resReg$y2[i],x2=resReg$x1[i],y2=resReg$y1[i],\n                        start=resReg$start[i],end=resReg$end[i],label=resReg$text[i],\n                        useLabel=useLabel)\n      }\n      p\n\n  } else {\n  p<-p+geom_segment(data=resReg[substr(resReg$label,1,1)!=\"c\",],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                    linetype=resReg[substr(resReg$label,1,1)!=\"c\",]$linetype,\n                    arrow=arrow(angle=20,length=unit(0.3,\"cm\"),type=\"closed\"))\n  p<-p+geom_curve(data=resReg[substr(resReg$label,1,1)==\"c\",],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                  linetype=resReg[substr(resReg$label,1,1)==\"c\",]$linetype,curvature = 0.1,\n                  arrow=arrow(angle=20,length=unit(0.3,\"cm\"),type=\"closed\"))\n\n  if(useLabel) {\n      p<-p+geom_label(data=resReg[substr(resReg$label,1,1)!=\"c\",],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2\",label=\"text\"))\n      p<-p+geom_label(data=resReg[substr(resReg$label,1,1)==\"c\",],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2-2\",label=\"text\"))\n  }else {\n      p<-p+geom_label(data=resReg[substr(resReg$label,1,1)!=\"c\",],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2\",label=\"text\"),label.size=0)\n      p<-p+geom_label(data=resReg[substr(resReg$label,1,1)==\"c\",],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2-2\",label=\"text\"),label.size=0)\n  }\n\n  p\n  }\n\n  }\n\n  }\n\n\n  if(residuals){\n    ##  Correlation\n    resCor=res[res$op==\"~~\",]\n\n    if(nrow(resCor)>0){\n      #height=3;width=5;whatLabels=\"est\"\n      resCor=mergeDataPos(resCor,df2,whatLabels,height=height,width=width)\n      resCor=addLinetype(resCor)\n      resCor\n      #str(resCor)\n\n      if(nrow(resCor[resCor$curvature==2,])>0)\n        p<-p+geom_curve(data=resCor[resCor$curvature==2,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),curvature=2.5,\n                        #linetype=resCor[resCor$curvature==2,]$linetype,\n                        arrow=arrow(angle=20,length=unit(0.2,\"cm\"),ends=\"both\",type=\"closed\"))\n      if(nrow(resCor[resCor$curvature==-2,])>0)\n        p<-p+geom_curve(data=resCor[resCor$curvature==-2,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),curvature=-2.5,\n                        #linetype=resCor[resCor$curvature==-2,]$linetype,\n                        arrow=arrow(angle=20,length=unit(0.2,\"cm\"),ends=\"both\",type=\"closed\"))\n      if(nrow(resCor[resCor$curvature==-0.3,])>0)\n        p<-p+geom_curve(data=resCor[resCor$curvature==-0.3,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                        #linetype=resCor[resCor$curvature==-0.3,]$linetype,\n                        curvature=-0.2,\n                        arrow=arrow(angle=20,length=unit(0.2,\"cm\"),ends=\"both\",type=\"closed\"))\n      if(nrow(resCor[resCor$curvature==0.3,])>0)\n          p<-p+geom_curve(data=resCor[resCor$curvature==0.3,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                          #linetype=resCor[resCor$curvature==-0.3,]$linetype,\n                          curvature=0.2,\n                          arrow=arrow(angle=20,length=unit(0.2,\"cm\"),ends=\"both\",type=\"closed\"))\n\n      if(whatLabels!=\"name\"){\n      if(useLabel) {\n        #p<-p+geom_text(data=resCor[resCor$group %in% c(\"X\",\"Y\",\"H2\"),],aes(x=(x+xend)/2,y=(y+yend)/2,label=label))\n        if(nrow(resCor[resCor$position==4,])>0)\n          p<-p+geom_label(data=resCor[resCor$position==4,],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2-height*3/4\",label=\"text\"),vjust=1.5)\n        if(nrow(resCor[resCor$position==3,])>0)\n          p<-p+geom_label(data=resCor[resCor$position==3,],aes_string(x=\"(x+xend)/2+width*1/2\",y=\"(y+yend)/2\",label=\"text\"),hjust=-0.1)\n        if(nrow(resCor[resCor$position==2,])>0)\n          p<-p+geom_label(data=resCor[resCor$position==2,],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2+height*3/4\",label=\"text\"),vjust=-0.5)\n        if(nrow(resCor[resCor$position==1,])>0)\n          p<-p+geom_label(data=resCor[resCor$position==1,],aes_string(x=\"(x+xend)/2-width*1/2\",y=\"(y+yend)/2\",label=\"text\"),hjust=1.1)\n      }\n      else {\n        if(nrow(resCor[resCor$position==4,])>0)\n          p<-p+geom_text(data=resCor[resCor$position==4,],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2-height*3/4\",label=\"text\"),vjust=1.5)\n        if(nrow(resCor[resCor$position==3,])>0)\n          p<-p+geom_text(data=resCor[resCor$position==3,],aes_string(x=\"(x+xend)/2+width*1/2\",y=\"(y+yend)/2\",label=\"text\"),hjust=-0.1)\n        if(nrow(resCor[resCor$position==2,])>0)\n          p<-p+geom_text(data=resCor[resCor$position==2,],aes_string(x=\"(x+xend)/2\",y=\"(y+yend)/2+height*3/4\",label=\"text\"),vjust=-0.5)\n        if(nrow(resCor[resCor$position==1,])>0)\n          p<-p+geom_text(data=resCor[resCor$position==1,],aes_string(x=\"(x+xend)/2-width*1/2\",y=\"(y+yend)/2\",label=\"text\"),hjust=1.1)\n      }\n         }\n    }\n  }\n\n p\n  ## 2nd Indirect Effect\n  if(secondIndirect){\n  res2Ind=res[substr(res$label,1,6)==\"second\",]\n  res2Ind\n  if(nrow(res2Ind)>0){\n    res2Ind=mergeDataPos2Ind(res2Ind,res,df2,whatLabels,height=height,width=width)\n    res2Ind=addLinetype(res2Ind)\n    res2Ind\n    for(i in 1:nrow(res2Ind)){\n      #i=1\n      Reglist=unlist(strsplit(res2Ind$rhs[i],c(\"+\"),fixed=TRUE))\n      Reglist=unlist(strsplit(Reglist,c(\"*\"),fixed=TRUE))\n      Reglist\n      resReglist=res[res$label %in% Reglist,]\n      resReglist\n      resReglist=mergeDataPos(resReglist,df2,whatLabels,height=height,width=width)\n      resReglist$linetype=res2Ind$linetype[i]\n      resReglist\n\n      maxx=which.max(resReglist$xend)\n      #p<-p+geom_segment(data=resReglist,aes(x=x,y=y,xend=xend,yend=yend),linetype=resReglist$linetype,\n      #                  arrow=arrow(angle=20,length=unit(0.3,\"cm\"),type=\"closed\"),color=\"blue\",alpha=0.5,size=2)\n\n      p<-p+geom_segment(data=resReglist[-maxx,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                        linetype=resReglist[-maxx,]$linetype,\n                        color=\"blue\",alpha=0.5,size=1)\n      p<-p+geom_segment(data=resReglist[maxx,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                        linetype=resReglist[maxx,]$linetype,\n                        arrow=arrow(angle=20,length=unit(0.3,\"cm\"),type=\"closed\"),color=\"blue\",alpha=0.5,size=1)\n    p\n    }\n    if(whatLabels!=\"name\") p<-p+geom_label(data=res2Ind,aes_string(x=\"x\",y=\"y\",label=\"text\"),color=\"blue\")\n\n  }\n  }\n p\n ## Indirect Effect\n  if(indirect){\n\n    resInd=res[substr(res$label,1,3)==\"ind\",]\n    resInd\n    if(nrow(resInd)>0){\n      #height=3;width=5;whatLabels=\"est\"\n      resInd=mergeDataPosInd(resInd,res,df2,whatLabels,height=height,width=width)\n      resInd=addLinetype(resInd)\n      resInd\n      for(i in 1:nrow(resInd)){\n\n        Reglist=unlist(strsplit(resInd$rhs[i],\"*\",fixed=TRUE))\n        resReglist=res[res$label %in% Reglist,]\n        resReglist=mergeDataPos(resReglist,df2,whatLabels,height=height,width=width)\n        resReglist$linetype=resInd$linetype[i]\n        resReglist\n        maxx=which.max(resReglist$xend)\n        p<-p+geom_segment(data=resReglist[-maxx,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                          linetype=resReglist[-maxx,]$linetype,\n                          color=\"red\",alpha=0.5,size=1)\n        p<-p+geom_segment(data=resReglist[maxx,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\"),\n                          linetype=resReglist[maxx,]$linetype,\n                          arrow=arrow(angle=20,length=unit(0.3,\"cm\"),type=\"closed\"),color=\"red\",alpha=0.5,size=1)\n\n\n      }\n      if(whatLabels!=\"name\") p<-p+geom_label(data=resInd,aes_string(x=\"x\",y=\"y\",label=\"text\"),color=\"red\")\n\n    }\n  }\n if(total){\n     res\n     resTotal=res[substr(res$label,1,5)==\"total\",]\n     resTotal\n     if(nrow(resTotal)>0){\n         #height=3;width=5;whatLabels=\"est\"\n         resTotal=mergeDataPosInd(resTotal,res,df2,whatLabels,height=height,width=width)\n         resTotal=addLinetype(resTotal)\n         resTotal\n         for(i in 1:nrow(resTotal)){\n             #i=1\n             Reglist=unlist(strsplit(resTotal$rhs[i],\"+\",fixed=TRUE))\n             Reglist=unlist(strsplit(Reglist,\"*\",fixed=TRUE))\n             Reglist\n             (resReglist=res[res$label %in% Reglist,])\n\n             resReglist=mergeDataPos(resReglist,df2,whatLabels,height=height,width=width)\n             #resReglist$linetype=resTotal$linetype[i]\n             resReglist$effect=\"indirect\"\n             resReglist[substr(resReglist$label,1,1)==\"c\",]$effect=\"direct\"\n             resReglist=addLinetype(resReglist)\n             resReglist\n             select=resReglist$xend<max(resReglist$xend)\n             resReglist[select,]\n             resReglist[!select,]\n             resReglist\n             #p<-p2\n             p<-p+geom_segment(data=resReglist[select,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\",color=\"effect\"),\n                               linetype=resReglist[select,]$linetype,\n                               alpha=0.5,size=1)\n             p\n             p<-p+geom_segment(data=resReglist[!select,],aes_string(x=\"x\",y=\"y\",xend=\"xend\",yend=\"yend\",color=\"effect\"),\n                               linetype=resReglist[!select,]$linetype,\n                               arrow=arrow(angle=20,length=unit(0.3,\"cm\"),type=\"closed\"),alpha=0.5,size=1)\n\n\n         }\n         select=(substr(res$label,1,1)==\"c\")\n         (resTotal2=res[select,])\n         resTotal2=mergeDataPos(resTotal2,df2,whatLabels,height=height,width=width)\n         resTotal2$effect=\"direct\"\n         resTotal2$label=round(ifelse(whatLabels==\"est\",resTotal2$est,resTotal2$std.all),2)\n         resTotal2$x=(resTotal2$x1+resTotal2$x2)/2\n         resTotal2$y=(resTotal2$y1+resTotal2$y2)/2\n         resTotal2=resTotal2[c(\"x\",\"y\",\"label\",\"effect\")]\n         resTotal2\n         select=(substr(res$label,1,3)==\"ind\")\n         (resTotal3=res[select,])\n         resTotal3=mergeDataPosInd(resTotal3,res,df2,whatLabels,height=height,width=width)\n         resTotal3$effect=\"indirect\"\n         resTotal3$label=round(ifelse(whatLabels==\"est\",resTotal3$est,resTotal3$std.all),2)\n         resTotal3=resTotal3[c(\"x\",\"y\",\"label\",\"effect\")]\n         resTotal=rbind(resTotal2,resTotal3)\n         if(whatLabels!=\"name\"){\n         if(useLabel) p<-p+geom_label(data=resTotal,aes_string(x=\"x\",y=\"y\",label=\"label\",color=\"effect\"))\n         else p<-p+geom_label(data=resTotal,aes_string(x=\"x\",y=\"y\",label=\"label\",color=\"effect\"),label.size=0)\n         }\n\n     }\n }\n  p<-p+coord_fixed()\n  p\n\n}\n\n\n",
    "created" : 1470831854322.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "237933345",
    "id" : "21D9039D",
    "lastKnownWriteTime" : 1483258446,
    "last_content_update" : 1483258446897,
    "path" : "~/ownCloud/Documents/semMediation/R/mediationPlot.R",
    "project_path" : "R/mediationPlot.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}